{"version":3,"file":"static/js/618.6b7fc61d.chunk.js","mappings":"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","sources":["nft/components/bag/ButtonStates.tsx","nft/components/card/utils.tsx","graphql/data/nft/NftUniversalRouterAddress.ts","nft/utils/nftRoute.ts","nft/hooks/useTokenInput.ts","nft/utils/tokenRoutes.ts","nft/components/bag/BagFooter.tsx","nft/hooks/useBagTotalEthPrice.ts","nft/hooks/useSubscribeTransactionState.ts","nft/hooks/useFetchAssets.ts","nft/hooks/usePurchaseAssets.ts","nft/utils/bag.ts","nft/hooks/useDerivedPayWithAnyTokenSwapInfo.ts","nft/hooks/usePayWithAnyTokenSwap.ts","nft/hooks/usePriceImpact.ts","nft/components/bag/TimedLoader.tsx","nft/components/card/media.tsx","nft/components/card/icons.tsx","nft/components/bag/BagRow.css.ts","nft/components/bag/BagRow.tsx","nft/components/bag/BagContent.tsx","nft/components/bag/BagHeader.tsx","nft/components/bag/EmptyContent.tsx","nft/components/bag/profile/ProfileAssetRow.tsx","nft/components/bag/profile/ProfileBagContent.tsx","nft/components/bag/Bag.tsx","nft/components/bag/Bag.css.ts"],"sourcesContent":["import { Trans } from '@lingui/macro'\nimport { PriceImpact } from 'nft/hooks/usePriceImpact'\nimport { ReactNode } from 'react'\nimport { DefaultTheme } from 'styled-components'\n\nexport enum BuyButtonStates {\n  WALLET_NOT_CONNECTED,\n  NOT_SUPPORTED_CHAIN,\n  INSUFFICIENT_BALANCE,\n  ERROR,\n  IN_WALLET_CONFIRMATION,\n  PROCESSING_TRANSACTION,\n  FETCHING_TOKEN_ROUTE,\n  INVALID_TOKEN_ROUTE,\n  NO_TOKEN_ROUTE_FOUND,\n  LOADING_ALLOWANCE,\n  IN_WALLET_ALLOWANCE_APPROVAL,\n  PROCESSING_APPROVAL,\n  REQUIRE_APPROVAL,\n  CONFIRM_UPDATED_PRICE,\n  PRICE_IMPACT_HIGH,\n  PAY,\n}\n\nexport interface BuyButtonStateData {\n  handleClick: (() => void) | (() => Promise<void>)\n  buttonText: ReactNode\n  disabled: boolean\n  warningText?: ReactNode\n  warningTextColor: string\n  helperText?: ReactNode\n  helperTextColor: string\n  buttonColor: string\n  buttonTextColor: string\n}\n\nexport function getBuyButtonStateData(\n  buyButtonState: BuyButtonStates,\n  theme: DefaultTheme,\n  handleClickOverride?: (() => void) | (() => Promise<void>),\n  usingPayWithAnyToken?: boolean,\n  priceImpact?: PriceImpact\n): BuyButtonStateData {\n  const defaultBuyButtonState: BuyButtonStateData = {\n    handleClick: () => undefined,\n    buttonText: <Trans>Something went wrong</Trans>,\n    disabled: true,\n    warningText: undefined,\n    warningTextColor: theme.accentWarning,\n    helperText: undefined,\n    helperTextColor: theme.textSecondary,\n    buttonColor: theme.accentAction,\n    buttonTextColor: theme.accentTextLightPrimary,\n  }\n\n  const buyButtonStateData: Record<BuyButtonStates, BuyButtonStateData> = {\n    [BuyButtonStates.WALLET_NOT_CONNECTED]: {\n      ...defaultBuyButtonState,\n      handleClick: handleClickOverride ?? (() => undefined),\n      disabled: false,\n      buttonText: <Trans>Connect wallet</Trans>,\n    },\n    [BuyButtonStates.NOT_SUPPORTED_CHAIN]: {\n      ...defaultBuyButtonState,\n      handleClick: handleClickOverride ?? (() => undefined),\n      buttonText: <Trans>Switch networks</Trans>,\n      disabled: false,\n      warningText: <Trans>Wrong network</Trans>,\n    },\n    [BuyButtonStates.INSUFFICIENT_BALANCE]: {\n      ...defaultBuyButtonState,\n      buttonText: <Trans>Pay</Trans>,\n      warningText: <Trans>Insufficient funds</Trans>,\n    },\n    [BuyButtonStates.ERROR]: {\n      ...defaultBuyButtonState,\n      warningText: <Trans>Something went wrong. Please try again.</Trans>,\n    },\n    [BuyButtonStates.IN_WALLET_CONFIRMATION]: {\n      ...defaultBuyButtonState,\n      buttonText: <Trans>Proceed in wallet</Trans>,\n    },\n    [BuyButtonStates.PROCESSING_TRANSACTION]: {\n      ...defaultBuyButtonState,\n      buttonText: <Trans>Transaction pending</Trans>,\n    },\n    [BuyButtonStates.FETCHING_TOKEN_ROUTE]: {\n      ...defaultBuyButtonState,\n      buttonText: <Trans>Fetching Route</Trans>,\n    },\n    [BuyButtonStates.INVALID_TOKEN_ROUTE]: {\n      ...defaultBuyButtonState,\n      buttonText: <Trans>Pay</Trans>,\n    },\n    [BuyButtonStates.NO_TOKEN_ROUTE_FOUND]: {\n      ...defaultBuyButtonState,\n      buttonText: <Trans>Insufficient liquidity</Trans>,\n      buttonColor: theme.backgroundInteractive,\n      buttonTextColor: theme.textPrimary,\n      helperText: <Trans>Insufficient pool liquidity to complete transaction</Trans>,\n    },\n    [BuyButtonStates.LOADING_ALLOWANCE]: {\n      ...defaultBuyButtonState,\n      buttonText: <Trans>Loading Allowance</Trans>,\n    },\n    [BuyButtonStates.IN_WALLET_ALLOWANCE_APPROVAL]: {\n      ...defaultBuyButtonState,\n      buttonText: <Trans>Approve in your wallet</Trans>,\n    },\n    [BuyButtonStates.PROCESSING_APPROVAL]: {\n      ...defaultBuyButtonState,\n      buttonText: <Trans>Approval pending</Trans>,\n    },\n    [BuyButtonStates.REQUIRE_APPROVAL]: {\n      ...defaultBuyButtonState,\n      disabled: false,\n      handleClick: handleClickOverride ?? (() => undefined),\n      helperText: <Trans>An approval is needed to use this token. </Trans>,\n      buttonText: <Trans>Approve</Trans>,\n    },\n    [BuyButtonStates.CONFIRM_UPDATED_PRICE]: {\n      ...defaultBuyButtonState,\n      handleClick: handleClickOverride ?? (() => undefined),\n      disabled: false,\n      warningTextColor: theme.accentAction,\n      warningText: <Trans>Price updated</Trans>,\n      buttonText: <Trans>Pay</Trans>,\n    },\n    [BuyButtonStates.PRICE_IMPACT_HIGH]: {\n      ...defaultBuyButtonState,\n      handleClick: handleClickOverride ?? (() => undefined),\n      disabled: false,\n      buttonColor: priceImpact ? priceImpact.priceImpactSeverity.color : defaultBuyButtonState.buttonColor,\n      helperText: <Trans>Price impact warning</Trans>,\n      helperTextColor: priceImpact ? priceImpact.priceImpactSeverity.color : defaultBuyButtonState.helperTextColor,\n      buttonText: <Trans>Pay Anyway</Trans>,\n    },\n    [BuyButtonStates.PAY]: {\n      ...defaultBuyButtonState,\n      handleClick: handleClickOverride ?? (() => undefined),\n      disabled: false,\n      buttonText: <Trans>Pay</Trans>,\n      helperText: usingPayWithAnyToken ? <Trans>Refunds for unavailable items will be given in ETH</Trans> : undefined,\n    },\n  }\n\n  return buyButtonStateData[buyButtonState]\n}\n","import { NftImage, NftPlayableMedia } from 'nft/components/card/media'\nimport {\n  LarvaLabsMarketplaceIcon,\n  LooksRareIcon,\n  Nft20Icon,\n  NftXIcon,\n  OpenSeaMarketplaceIcon,\n  SudoSwapIcon,\n  X2y2Icon,\n} from 'nft/components/icons'\nimport { GenieAsset, Markets, UniformAspectRatio, UniformAspectRatios, WalletAsset } from 'nft/types'\nimport { isAudio, isVideo } from 'nft/utils'\nimport { ReactNode, useCallback } from 'react'\n\nenum AssetMediaType {\n  Image,\n  Video,\n  Audio,\n}\n\nfunction getAssetImageUrl(asset: GenieAsset | WalletAsset) {\n  return asset.imageUrl || asset.smallImageUrl\n}\n\nfunction getAssetMediaUrl(asset: GenieAsset | WalletAsset) {\n  return asset.animationUrl\n}\n\nexport function detailsHref(asset: GenieAsset | WalletAsset) {\n  if ('address' in asset) return `/nfts/asset/${asset.address}/${asset.tokenId}?origin=collection`\n  if ('asset_contract' in asset) return `/nfts/asset/${asset.asset_contract.address}/${asset.tokenId}?origin=profile`\n  return '/nfts/profile'\n}\n\nfunction getAssetMediaType(asset: GenieAsset | WalletAsset) {\n  let assetMediaType = AssetMediaType.Image\n  if (asset.animationUrl) {\n    if (isAudio(asset.animationUrl)) {\n      assetMediaType = AssetMediaType.Audio\n    } else if (isVideo(asset.animationUrl)) {\n      assetMediaType = AssetMediaType.Video\n    }\n  }\n  return assetMediaType\n}\n\nexport function getNftDisplayComponent(\n  asset: GenieAsset | WalletAsset,\n  mediaShouldBePlaying: boolean,\n  setCurrentTokenPlayingMedia: (tokenId: string | undefined) => void,\n  uniformAspectRatio?: UniformAspectRatio,\n  setUniformAspectRatio?: (uniformAspectRatio: UniformAspectRatio) => void,\n  renderedHeight?: number,\n  setRenderedHeight?: (renderedHeight: number | undefined) => void\n) {\n  switch (getAssetMediaType(asset)) {\n    case AssetMediaType.Image:\n      return (\n        <NftImage\n          src={getAssetImageUrl(asset)}\n          uniformAspectRatio={uniformAspectRatio}\n          setUniformAspectRatio={setUniformAspectRatio}\n          renderedHeight={renderedHeight}\n          setRenderedHeight={setRenderedHeight}\n        />\n      )\n    case AssetMediaType.Video:\n      return (\n        <NftPlayableMedia\n          src={getAssetImageUrl(asset)}\n          mediaSrc={getAssetMediaUrl(asset)}\n          tokenId={asset.tokenId}\n          shouldPlay={mediaShouldBePlaying}\n          setCurrentTokenPlayingMedia={setCurrentTokenPlayingMedia}\n          uniformAspectRatio={uniformAspectRatio}\n          setUniformAspectRatio={setUniformAspectRatio}\n          renderedHeight={renderedHeight}\n          setRenderedHeight={setRenderedHeight}\n        />\n      )\n    case AssetMediaType.Audio:\n      return (\n        <NftPlayableMedia\n          isAudio={true}\n          src={getAssetImageUrl(asset)}\n          mediaSrc={getAssetMediaUrl(asset)}\n          tokenId={asset.tokenId}\n          shouldPlay={mediaShouldBePlaying}\n          setCurrentTokenPlayingMedia={setCurrentTokenPlayingMedia}\n          uniformAspectRatio={uniformAspectRatio}\n          setUniformAspectRatio={setUniformAspectRatio}\n          renderedHeight={renderedHeight}\n          setRenderedHeight={setRenderedHeight}\n        />\n      )\n  }\n}\n\nexport function useSelectAsset({\n  selectAsset,\n  unselectAsset,\n  isSelected,\n  isDisabled,\n  onClick,\n}: {\n  selectAsset?: () => void\n  unselectAsset?: () => void\n  isSelected: boolean\n  isDisabled: boolean\n  onClick?: () => void\n}) {\n  return useCallback(\n    (e: React.MouseEvent) => {\n      e.stopPropagation()\n      e.preventDefault()\n\n      if (isDisabled) {\n        return\n      }\n\n      if (onClick) {\n        onClick()\n        return\n      }\n\n      return isSelected ? unselectAsset?.() : selectAsset?.()\n    },\n    [selectAsset, isDisabled, onClick, unselectAsset, isSelected]\n  )\n}\n\nexport function getMarketplaceIcon(market: Markets): ReactNode {\n  switch (market) {\n    case Markets.Opensea:\n      return <OpenSeaMarketplaceIcon />\n    case Markets.LooksRare:\n      return <LooksRareIcon />\n    case Markets.X2Y2:\n      return <X2y2Icon />\n    case Markets.Sudoswap:\n      return <SudoSwapIcon />\n    case Markets.NFT20:\n      return <Nft20Icon />\n    case Markets.NFTX:\n      return <NftXIcon />\n    case Markets.Cryptopunks:\n      return <LarvaLabsMarketplaceIcon />\n    default:\n      return null\n  }\n}\n\nexport const handleUniformAspectRatio = (\n  uniformAspectRatio: UniformAspectRatio,\n  e: React.SyntheticEvent<HTMLElement, Event>,\n  setUniformAspectRatio?: (uniformAspectRatio: UniformAspectRatio) => void,\n  renderedHeight?: number,\n  setRenderedHeight?: (renderedHeight: number | undefined) => void\n) => {\n  if (uniformAspectRatio !== UniformAspectRatios.square && setUniformAspectRatio) {\n    const height = e.currentTarget.clientHeight\n    const width = e.currentTarget.clientWidth\n    const aspectRatio = width / height\n\n    if (\n      (!renderedHeight || renderedHeight !== height) &&\n      aspectRatio < 1 &&\n      uniformAspectRatio !== UniformAspectRatios.square &&\n      setRenderedHeight\n    ) {\n      setRenderedHeight(height)\n    }\n\n    const variance = 0.05\n    if (uniformAspectRatio === UniformAspectRatios.unset) {\n      setUniformAspectRatio(aspectRatio >= 1 ? UniformAspectRatios.square : aspectRatio)\n    } else if (aspectRatio > uniformAspectRatio + variance || aspectRatio < uniformAspectRatio - variance) {\n      setUniformAspectRatio(UniformAspectRatios.square)\n      setRenderedHeight && setRenderedHeight(undefined)\n    }\n  }\n}\n\nexport function getHeightFromAspectRatio(\n  uniformAspectRatio: UniformAspectRatio,\n  renderedHeight?: number\n): number | undefined {\n  return uniformAspectRatio === UniformAspectRatios.square || uniformAspectRatio === UniformAspectRatios.unset\n    ? undefined\n    : renderedHeight\n}\n\nexport function getMediaAspectRatio(\n  uniformAspectRatio?: UniformAspectRatio,\n  setUniformAspectRatio?: (uniformAspectRatio: UniformAspectRatio) => void\n): string {\n  return uniformAspectRatio === UniformAspectRatios.square || !setUniformAspectRatio ? '1' : 'auto'\n}\n","import { ChainId } from '@uniswap/sdk-core'\nimport { UNIVERSAL_ROUTER_ADDRESS } from '@uniswap/universal-router-sdk'\nimport { isSupportedChain } from 'constants/chains'\nimport gql from 'graphql-tag'\n\nimport { useNftUniversalRouterAddressQuery } from '../__generated__/types-and-hooks'\n\ngql`\n  query NftUniversalRouterAddress($chain: Chain = ETHEREUM) {\n    nftRoute(chain: $chain, senderAddress: \"\", nftTrades: []) {\n      toAddress\n    }\n  }\n`\n\nexport function getURAddress(chainId?: number, nftURAddress?: string): string | undefined {\n  if (!chainId) return undefined\n  // if mainnet and on NFT flow, use the contract address returned by GQL\n  if (chainId === ChainId.MAINNET) {\n    return nftURAddress ?? UNIVERSAL_ROUTER_ADDRESS(chainId)\n  }\n  return isSupportedChain(chainId) ? UNIVERSAL_ROUTER_ADDRESS(chainId) : undefined\n}\n\nexport function useNftUniversalRouterAddress() {\n  const { data, loading } = useNftUniversalRouterAddressQuery({\n    // no cache because a different version of nftRoute query is going to be called around the same time\n    fetchPolicy: 'no-cache',\n  })\n\n  return {\n    universalRouterAddress: data?.nftRoute?.toAddress,\n    universalRouterAddressIsLoading: loading,\n  }\n}\n","import { NftRouteResponse, NftTrade } from 'graphql/data/__generated__/types-and-hooks'\nimport { Markets, RouteResponse, RoutingActions, RoutingItem, TokenType } from 'nft/types'\n\nfunction buildRoutingItem(routingItem: NftTrade): RoutingItem {\n  return {\n    action: RoutingActions.Buy,\n    marketplace: routingItem.marketplace.toLowerCase(),\n    amountIn: routingItem.price.value,\n    assetIn: {\n      ETHPrice: routingItem.price.value,\n      baseAsset: routingItem.price.currency,\n      basePrice: routingItem.price.value,\n      baseDecimals: '18',\n    },\n    amountOut: routingItem.amount.toString(),\n    assetOut: {\n      id: routingItem.id,\n      decimals: 18,\n      address: routingItem.contractAddress,\n      priceInfo: {\n        ETHPrice: routingItem.price.value,\n        baseAsset: routingItem.price.currency,\n        basePrice: routingItem.price.value,\n        baseDecimals: '18',\n      },\n      tokenType: routingItem.tokenType as unknown as TokenType,\n      tokenId: routingItem.tokenId,\n      amount: routingItem.amount.toString(),\n      marketplace: routingItem.marketplace.toLowerCase() as Markets,\n      orderSource: 'api',\n    },\n  }\n}\n\nfunction buildRoutingItems(routingItems: readonly NftTrade[]): RoutingItem[] {\n  return routingItems.map(buildRoutingItem)\n}\n\nexport function buildRouteResponse(\n  routeResponse: NftRouteResponse,\n  useErc20Token: boolean\n): { route: RoutingItem[]; routeResponse: RouteResponse } {\n  const route = routeResponse.route ? buildRoutingItems(routeResponse.route) : []\n  return {\n    route,\n    routeResponse: {\n      route,\n      valueToSend: useErc20Token ? undefined : routeResponse.sendAmount.value,\n      data: routeResponse.calldata,\n      to: routeResponse.toAddress,\n    },\n  }\n}\n","import { Currency } from '@uniswap/sdk-core'\nimport { TokenTradeInput } from 'graphql/data/__generated__/types-and-hooks'\nimport { create } from 'zustand'\nimport { devtools } from 'zustand/middleware'\n\ninterface TokenInputState {\n  inputCurrency?: Currency\n  setInputCurrency: (currency: Currency | undefined) => void\n  clearInputCurrency: () => void\n  tokenTradeInput?: TokenTradeInput\n  setTokenTradeInput: (tokenTradeInput: TokenTradeInput | undefined) => void\n}\n\nexport const useTokenInput = create<TokenInputState>()(\n  devtools(\n    (set) => ({\n      inputCurrency: undefined,\n      tokenTradeInput: undefined,\n      setInputCurrency: (currency) => set(() => ({ inputCurrency: currency })),\n      clearInputCurrency: () => set(() => ({ inputCurrency: undefined })),\n      setTokenTradeInput: (tokenTradeInput) => set(() => ({ tokenTradeInput })),\n    }),\n    { name: 'useTokenInput' }\n  )\n)\n","import { IRoute, Protocol } from '@uniswap/router-sdk'\nimport { Currency, CurrencyAmount } from '@uniswap/sdk-core'\nimport { Pair } from '@uniswap/v2-sdk'\nimport { Pool } from '@uniswap/v3-sdk'\nimport { TokenAmountInput, TokenTradeRouteInput, TradePoolInput } from 'graphql/data/__generated__/types-and-hooks'\nimport { ClassicTrade } from 'state/routing/types'\n\ninterface SwapAmounts {\n  inputAmount: CurrencyAmount<Currency>\n  outputAmount: CurrencyAmount<Currency>\n}\n\ninterface TradeTokenInputAmounts {\n  inputAmount: TokenAmountInput\n  outputAmount: TokenAmountInput\n}\n\ninterface Swap {\n  route: IRoute<Currency, Currency, Pair | Pool>\n  inputAmount: CurrencyAmount<Currency>\n  outputAmount: CurrencyAmount<Currency>\n}\n\nfunction buildTradeRouteInputAmounts(swapAmounts: SwapAmounts): TradeTokenInputAmounts {\n  return {\n    inputAmount: {\n      amount: swapAmounts.inputAmount.quotient.toString(),\n      token: {\n        address: swapAmounts.inputAmount.currency.isToken\n          ? swapAmounts.inputAmount.currency.address\n          : '0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee',\n        chainId: swapAmounts.inputAmount.currency.chainId,\n        decimals: swapAmounts.inputAmount.currency.decimals,\n        isNative: swapAmounts.inputAmount.currency.isNative,\n      },\n    },\n    outputAmount: {\n      amount: swapAmounts.outputAmount.quotient.toString(),\n      token: {\n        address: swapAmounts.outputAmount.currency.isToken\n          ? swapAmounts.outputAmount.currency.address\n          : '0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee',\n        chainId: swapAmounts.outputAmount.currency.chainId,\n        decimals: swapAmounts.outputAmount.currency.decimals,\n        isNative: swapAmounts.outputAmount.currency.isNative,\n      },\n    },\n  }\n}\n\nfunction buildPool(pool: Pair | Pool): TradePoolInput {\n  const isPool = 'fee' in pool\n\n  return {\n    pair: !isPool\n      ? {\n          tokenAmountA: {\n            amount: pool.reserve0.quotient.toString(),\n            token: {\n              address: pool.token0.address,\n              chainId: pool.token0.chainId,\n              decimals: pool.token0.decimals,\n              isNative: pool.token0.isNative,\n            },\n          },\n          tokenAmountB: {\n            amount: pool.reserve1.quotient.toString(),\n            token: {\n              address: pool.token1.address,\n              chainId: pool.token1.chainId,\n              decimals: pool.token1.decimals,\n              isNative: pool.token1.isNative,\n            },\n          },\n        }\n      : undefined,\n    pool: isPool\n      ? {\n          fee: pool.fee,\n          liquidity: pool.liquidity.toString(),\n          sqrtRatioX96: pool.sqrtRatioX96.toString(),\n          tickCurrent: pool.tickCurrent.toString(),\n          tokenA: {\n            address: pool.token0.address,\n            chainId: pool.token0.chainId,\n            decimals: pool.token0.decimals,\n            isNative: pool.token0.isNative,\n          },\n          tokenB: {\n            address: pool.token1.address,\n            chainId: pool.token1.chainId,\n            decimals: pool.token1.decimals,\n            isNative: pool.token1.isNative,\n          },\n        }\n      : undefined,\n  }\n}\n\nfunction buildPools(pools: (Pair | Pool)[]): TradePoolInput[] {\n  return pools.map((pool) => buildPool(pool))\n}\n\nfunction buildTradeRouteInput(swap: Swap): TokenTradeRouteInput {\n  return {\n    ...buildTradeRouteInputAmounts({ inputAmount: swap.inputAmount, outputAmount: swap.outputAmount }),\n    pools: buildPools(swap.route.pools),\n  }\n}\n\nexport function buildAllTradeRouteInputs(trade: ClassicTrade): {\n  mixedTokenTradeRouteInputs?: TokenTradeRouteInput[]\n  v2TokenTradeRouteInputs?: TokenTradeRouteInput[]\n  v3TokenTradeRouteInputs?: TokenTradeRouteInput[]\n} {\n  const mixedTokenTradeRouteInputs: TokenTradeRouteInput[] = []\n  const v2TokenTradeRouteInputs: TokenTradeRouteInput[] = []\n  const v3TokenTradeRouteInputs: TokenTradeRouteInput[] = []\n\n  const swaps = trade.swaps\n\n  for (const swap of swaps) {\n    if (swap.route.protocol === Protocol.MIXED) {\n      mixedTokenTradeRouteInputs.push(buildTradeRouteInput(swap))\n    } else if (swap.route.protocol === Protocol.V2) {\n      v2TokenTradeRouteInputs.push(buildTradeRouteInput(swap))\n    } else {\n      v3TokenTradeRouteInputs.push(buildTradeRouteInput(swap))\n    }\n  }\n\n  return {\n    mixedTokenTradeRouteInputs: mixedTokenTradeRouteInputs.length > 0 ? mixedTokenTradeRouteInputs : undefined,\n    v2TokenTradeRouteInputs: v2TokenTradeRouteInputs.length > 0 ? v2TokenTradeRouteInputs : undefined,\n    v3TokenTradeRouteInputs: v3TokenTradeRouteInputs.length > 0 ? v3TokenTradeRouteInputs : undefined,\n  }\n}\n","import { BigNumber } from '@ethersproject/bignumber'\nimport { formatEther, parseEther } from '@ethersproject/units'\nimport { t, Trans } from '@lingui/macro'\nimport { BrowserEvent, InterfaceElementName, NFTEventName } from '@uniswap/analytics-events'\nimport { ChainId, Currency, CurrencyAmount, Token } from '@uniswap/sdk-core'\nimport { useWeb3React } from '@web3-react/core'\nimport { sendAnalyticsEvent, TraceEvent } from 'analytics'\nimport { useToggleAccountDrawer } from 'components/AccountDrawer'\nimport Column from 'components/Column'\nimport Loader from 'components/Icons/LoadingSpinner'\nimport CurrencyLogo from 'components/Logo/CurrencyLogo'\nimport Row from 'components/Row'\nimport CurrencySearchModal from 'components/SearchModal/CurrencySearchModal'\nimport { LoadingBubble } from 'components/Tokens/loading'\nimport { MouseoverTooltip } from 'components/Tooltip'\nimport { isSupportedChain } from 'constants/chains'\nimport { getURAddress, useNftUniversalRouterAddress } from 'graphql/data/nft/NftUniversalRouterAddress'\nimport { useCurrency } from 'hooks/Tokens'\nimport usePermit2Allowance, { AllowanceState } from 'hooks/usePermit2Allowance'\nimport { useStablecoinValue } from 'hooks/useStablecoinPrice'\nimport { useSwitchChain } from 'hooks/useSwitchChain'\nimport { useTokenBalance } from 'lib/hooks/useCurrencyBalance'\nimport tryParseCurrencyAmount from 'lib/utils/tryParseCurrencyAmount'\nimport { useBag } from 'nft/hooks/useBag'\nimport { useBagTotalEthPrice } from 'nft/hooks/useBagTotalEthPrice'\nimport useDerivedPayWithAnyTokenSwapInfo from 'nft/hooks/useDerivedPayWithAnyTokenSwapInfo'\nimport { useFetchAssets } from 'nft/hooks/useFetchAssets'\nimport usePayWithAnyTokenSwap from 'nft/hooks/usePayWithAnyTokenSwap'\nimport { PriceImpact, usePriceImpact } from 'nft/hooks/usePriceImpact'\nimport { useSubscribeTransactionState } from 'nft/hooks/useSubscribeTransactionState'\nimport { useTokenInput } from 'nft/hooks/useTokenInput'\nimport { useWalletBalance } from 'nft/hooks/useWalletBalance'\nimport { BagStatus } from 'nft/types'\nimport { ethNumberStandardFormatter, formatWeiToDecimal } from 'nft/utils'\nimport { PropsWithChildren, useEffect, useMemo, useState } from 'react'\nimport { AlertTriangle, ChevronDown } from 'react-feather'\nimport { InterfaceTrade, TradeFillType, TradeState } from 'state/routing/types'\nimport styled, { useTheme } from 'styled-components'\nimport { ThemedText } from 'theme'\nimport { shallow } from 'zustand/shallow'\n\nimport { BuyButtonStateData, BuyButtonStates, getBuyButtonStateData } from './ButtonStates'\n\nconst FooterContainer = styled.div`\n  padding: 0px 12px;\n`\n\nconst Footer = styled.div`\n  border-top: 1px solid ${({ theme }) => theme.backgroundOutline};\n  color: ${({ theme }) => theme.textPrimary};\n  display: flex;\n  flex-direction: column;\n  margin: 0px 16px 8px;\n  padding: 12px 0px;\n  border-bottom-left-radius: 12px;\n  border-bottom-right-radius: 12px;\n`\n\nconst FooterHeader = styled(Column)`\n  padding-top: 8px;\n  padding-bottom: 16px;\n`\n\nconst CurrencyRow = styled(Row)`\n  justify-content: space-between;\n  align-items: start;\n  gap: 8px;\n`\n\nconst TotalColumn = styled(Column)`\n  text-align: end;\n  overflow-x: hidden;\n`\n\nconst WarningIcon = styled(AlertTriangle)`\n  width: 14px;\n  margin-right: 4px;\n  color: inherit;\n`\nconst WarningText = styled(ThemedText.BodyPrimary)<{ $color: string }>`\n  align-items: center;\n  color: ${({ $color }) => $color};\n  display: flex;\n  justify-content: center;\n  margin-bottom: 10px !important;\n  text-align: center;\n`\n\nconst HelperText = styled(ThemedText.Caption)<{ $color: string }>`\n  color: ${({ $color }) => $color};\n  display: flex;\n  justify-content: center;\n  text-align: center;\n  margin-bottom: 10px !important;\n`\n\nconst CurrencyInput = styled(Row)`\n  gap: 8px;\n  cursor: pointer;\n`\n\nconst ActionButton = styled.button<{ $backgroundColor: string; $color: string }>`\n  display: flex;\n  background: ${({ $backgroundColor }) => $backgroundColor};\n  color: ${({ $color }) => $color};\n  font-weight: 600;\n  line-height: 24px;\n  font-size: 16px;\n  gap: 16px;\n  justify-content: center;\n  border: none;\n  border-radius: 12px;\n  padding: 12px 0px;\n  cursor: pointer;\n  align-items: center;\n\n  &:disabled {\n    opacity: 0.6;\n    cursor: auto;\n  }\n`\nconst FiatLoadingBubble = styled(LoadingBubble)`\n  border-radius: 4px;\n  width: 4rem;\n  height: 20px;\n  align-self: end;\n`\nconst PriceImpactContainer = styled(Row)`\n  align-items: center;\n  gap: 8px;\n  width: 100%;\n  justify-content: flex-end;\n`\n\nconst PriceImpactRow = styled(Row)`\n  align-items: center;\n  gap: 8px;\n`\n\nconst ValueText = styled(ThemedText.BodyPrimary)`\n  line-height: 20px;\n  font-weight: 500;\n  overflow-x: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n  scrollbar-width: none;\n\n  ::-webkit-scrollbar {\n    display: none;\n  }\n`\n\ninterface HelperTextProps {\n  color: string\n}\n\nconst Warning = ({ color, children }: PropsWithChildren<HelperTextProps>) => {\n  if (!children) {\n    return null\n  }\n  return (\n    <WarningText data-testid=\"nft-buy-button-warning\" fontSize=\"14px\" lineHeight=\"20px\" $color={color}>\n      <WarningIcon />\n      {children}\n    </WarningText>\n  )\n}\n\nconst Helper = ({ children, color }: PropsWithChildren<HelperTextProps>) => {\n  if (!children) {\n    return null\n  }\n  return (\n    <HelperText lineHeight=\"16px\" $color={color}>\n      {children}\n    </HelperText>\n  )\n}\n\nconst InputCurrencyValue = ({\n  usingPayWithAnyToken,\n  totalEthPrice,\n  activeCurrency,\n  tradeState,\n  trade,\n}: {\n  usingPayWithAnyToken: boolean\n  totalEthPrice: BigNumber\n  activeCurrency?: Currency | null\n  tradeState: TradeState\n  trade?: InterfaceTrade\n}) => {\n  if (!usingPayWithAnyToken) {\n    return (\n      <ThemedText.BodyPrimary lineHeight=\"20px\" fontWeight=\"500\">\n        {formatWeiToDecimal(totalEthPrice.toString())}\n        &nbsp;{activeCurrency?.symbol ?? 'ETH'}\n      </ThemedText.BodyPrimary>\n    )\n  }\n\n  if (tradeState === TradeState.LOADING && !trade) {\n    return (\n      <ThemedText.BodyPrimary color=\"textTertiary\" lineHeight=\"20px\" fontWeight=\"500\">\n        <Trans>Fetching price...</Trans>\n      </ThemedText.BodyPrimary>\n    )\n  }\n\n  return (\n    <ValueText color={tradeState === TradeState.LOADING ? 'textTertiary' : 'textPrimary'}>\n      {ethNumberStandardFormatter(trade?.inputAmount.toExact())}\n    </ValueText>\n  )\n}\n\nconst FiatValue = ({\n  usdcValue,\n  priceImpact,\n  tradeState,\n  usingPayWithAnyToken,\n}: {\n  usdcValue: CurrencyAmount<Token> | null\n  priceImpact?: PriceImpact\n  tradeState: TradeState\n  usingPayWithAnyToken: boolean\n}) => {\n  if (!usdcValue) {\n    if (usingPayWithAnyToken && (tradeState === TradeState.INVALID || tradeState === TradeState.NO_ROUTE_FOUND)) {\n      return null\n    }\n\n    return <FiatLoadingBubble />\n  }\n\n  return (\n    <PriceImpactContainer>\n      {priceImpact && (\n        <>\n          <MouseoverTooltip text={t`The estimated difference between the USD values of input and output amounts.`}>\n            <PriceImpactRow>\n              <AlertTriangle color={priceImpact.priceImpactSeverity.color} size=\"16px\" />\n              <ThemedText.BodySmall style={{ color: priceImpact.priceImpactSeverity.color }} lineHeight=\"20px\">\n                (<Trans>{priceImpact.displayPercentage()}</Trans>)\n              </ThemedText.BodySmall>\n            </PriceImpactRow>\n          </MouseoverTooltip>\n        </>\n      )}\n      <ThemedText.BodySmall color=\"textTertiary\" lineHeight=\"20px\">\n        {`${ethNumberStandardFormatter(usdcValue?.toExact(), true)}`}\n      </ThemedText.BodySmall>\n    </PriceImpactContainer>\n  )\n}\n\nconst PENDING_BAG_STATUSES = [\n  BagStatus.FETCHING_ROUTE,\n  BagStatus.CONFIRMING_IN_WALLET,\n  BagStatus.FETCHING_FINAL_ROUTE,\n  BagStatus.PROCESSING_TRANSACTION,\n]\n\ninterface BagFooterProps {\n  setModalIsOpen: (open: boolean) => void\n  eventProperties: Record<string, unknown>\n}\n\nexport const BagFooter = ({ setModalIsOpen, eventProperties }: BagFooterProps) => {\n  const toggleWalletDrawer = useToggleAccountDrawer()\n  const theme = useTheme()\n  const { account, chainId, connector } = useWeb3React()\n  const connected = Boolean(account && chainId)\n  const totalEthPrice = useBagTotalEthPrice()\n  const { inputCurrency } = useTokenInput(({ inputCurrency }) => ({ inputCurrency }), shallow)\n  const setInputCurrency = useTokenInput((state) => state.setInputCurrency)\n  const defaultCurrency = useCurrency('ETH')\n  const inputCurrencyBalance = useTokenBalance(\n    account ?? undefined,\n    !!inputCurrency && inputCurrency.isToken ? inputCurrency : undefined\n  )\n  const {\n    isLocked: bagIsLocked,\n    bagStatus,\n    setBagExpanded,\n    setBagStatus,\n  } = useBag(\n    ({ isLocked, bagStatus, setBagExpanded, setBagStatus }) => ({\n      isLocked,\n      bagStatus,\n      setBagExpanded,\n      setBagStatus,\n    }),\n    shallow\n  )\n  const [tokenSelectorOpen, setTokenSelectorOpen] = useState(false)\n  const isPending = PENDING_BAG_STATUSES.includes(bagStatus)\n  const activeCurrency = inputCurrency ?? defaultCurrency\n  const usingPayWithAnyToken = !!inputCurrency && chainId === ChainId.MAINNET\n  const { universalRouterAddress, universalRouterAddressIsLoading } = useNftUniversalRouterAddress()\n\n  useSubscribeTransactionState(setModalIsOpen)\n  const fetchAssets = useFetchAssets()\n\n  const parsedOutputAmount = useMemo(() => {\n    return tryParseCurrencyAmount(formatEther(totalEthPrice.toString()), defaultCurrency ?? undefined)\n  }, [defaultCurrency, totalEthPrice])\n  const {\n    state: tradeState,\n    trade,\n    maximumAmountIn,\n    allowedSlippage,\n  } = useDerivedPayWithAnyTokenSwapInfo(usingPayWithAnyToken ? inputCurrency : undefined, parsedOutputAmount)\n  const allowance = usePermit2Allowance(\n    maximumAmountIn,\n    getURAddress(chainId, universalRouterAddress),\n    TradeFillType.Classic\n  )\n  const loadingAllowance = allowance.state === AllowanceState.LOADING || universalRouterAddressIsLoading\n  usePayWithAnyTokenSwap(trade, allowance, allowedSlippage)\n  const priceImpact = usePriceImpact(trade)\n\n  const fiatValueTradeInput = useStablecoinValue(trade?.inputAmount)\n  const fiatValueTradeOutput = useStablecoinValue(parsedOutputAmount)\n  const usdcValue = usingPayWithAnyToken ? fiatValueTradeInput : fiatValueTradeOutput\n\n  const { balance: balanceInEth } = useWalletBalance()\n  const sufficientBalance = useMemo(() => {\n    if (!connected || chainId !== ChainId.MAINNET) {\n      return undefined\n    }\n\n    if (inputCurrency) {\n      const inputAmount = trade?.inputAmount\n\n      if (!inputCurrencyBalance || !inputAmount) {\n        return undefined\n      }\n\n      return !inputCurrencyBalance.lessThan(inputAmount)\n    }\n\n    return parseEther(balanceInEth).gte(totalEthPrice)\n  }, [connected, chainId, inputCurrency, balanceInEth, totalEthPrice, trade?.inputAmount, inputCurrencyBalance])\n\n  useEffect(() => {\n    setBagStatus(BagStatus.ADDING_TO_BAG)\n  }, [inputCurrency, setBagStatus])\n\n  const switchChain = useSwitchChain()\n  const {\n    buttonText,\n    buttonTextColor,\n    disabled,\n    warningText,\n    warningTextColor,\n    helperText,\n    helperTextColor,\n    handleClick,\n    buttonColor,\n  } = useMemo((): BuyButtonStateData => {\n    if (connected && chainId !== ChainId.MAINNET) {\n      const handleClick = () => switchChain(connector, ChainId.MAINNET)\n      return getBuyButtonStateData(BuyButtonStates.NOT_SUPPORTED_CHAIN, theme, handleClick)\n    }\n\n    if (sufficientBalance === false) {\n      return getBuyButtonStateData(BuyButtonStates.INSUFFICIENT_BALANCE, theme)\n    }\n\n    if (bagStatus === BagStatus.WARNING) {\n      return getBuyButtonStateData(BuyButtonStates.ERROR, theme)\n    }\n\n    if (!connected) {\n      const handleClick = () => {\n        toggleWalletDrawer()\n        setBagExpanded({ bagExpanded: false })\n      }\n      return getBuyButtonStateData(BuyButtonStates.WALLET_NOT_CONNECTED, theme, handleClick)\n    }\n\n    if (bagStatus === BagStatus.FETCHING_FINAL_ROUTE || bagStatus === BagStatus.CONFIRMING_IN_WALLET) {\n      return getBuyButtonStateData(BuyButtonStates.IN_WALLET_CONFIRMATION, theme)\n    }\n\n    if (bagStatus === BagStatus.PROCESSING_TRANSACTION) {\n      return getBuyButtonStateData(BuyButtonStates.PROCESSING_TRANSACTION, theme)\n    }\n\n    if (usingPayWithAnyToken && tradeState !== TradeState.VALID) {\n      if (tradeState === TradeState.INVALID) {\n        return getBuyButtonStateData(BuyButtonStates.INVALID_TOKEN_ROUTE, theme)\n      }\n\n      if (tradeState === TradeState.NO_ROUTE_FOUND) {\n        return getBuyButtonStateData(BuyButtonStates.NO_TOKEN_ROUTE_FOUND, theme)\n      }\n\n      return getBuyButtonStateData(BuyButtonStates.FETCHING_TOKEN_ROUTE, theme)\n    }\n\n    const allowanceRequired = allowance.state === AllowanceState.REQUIRED\n    const handleClick = () => allowanceRequired && allowance.approveAndPermit()\n\n    if (loadingAllowance) {\n      return getBuyButtonStateData(BuyButtonStates.LOADING_ALLOWANCE, theme, handleClick)\n    }\n\n    if (allowanceRequired) {\n      if (allowance.isApprovalPending) {\n        return getBuyButtonStateData(BuyButtonStates.IN_WALLET_ALLOWANCE_APPROVAL, theme, handleClick)\n      } else if (allowance.isApprovalLoading) {\n        return getBuyButtonStateData(BuyButtonStates.PROCESSING_APPROVAL, theme, handleClick)\n      } else {\n        return getBuyButtonStateData(BuyButtonStates.REQUIRE_APPROVAL, theme, handleClick)\n      }\n    }\n\n    if (bagStatus === BagStatus.CONFIRM_QUOTE) {\n      return getBuyButtonStateData(BuyButtonStates.CONFIRM_UPDATED_PRICE, theme, fetchAssets)\n    }\n\n    if (priceImpact && priceImpact.priceImpactSeverity.type === 'error') {\n      return getBuyButtonStateData(\n        BuyButtonStates.PRICE_IMPACT_HIGH,\n        theme,\n        fetchAssets,\n        usingPayWithAnyToken,\n        priceImpact\n      )\n    }\n\n    return getBuyButtonStateData(BuyButtonStates.PAY, theme, fetchAssets, usingPayWithAnyToken)\n  }, [\n    connected,\n    chainId,\n    sufficientBalance,\n    bagStatus,\n    usingPayWithAnyToken,\n    tradeState,\n    loadingAllowance,\n    allowance,\n    priceImpact,\n    theme,\n    fetchAssets,\n    switchChain,\n    connector,\n    toggleWalletDrawer,\n    setBagExpanded,\n  ])\n\n  const traceEventProperties = {\n    usd_value: usdcValue?.toExact(),\n    using_erc20: !!inputCurrency,\n    ...eventProperties,\n  }\n\n  return (\n    <FooterContainer>\n      <Footer>\n        <FooterHeader gap=\"xs\">\n          <CurrencyRow>\n            <Column gap=\"xs\">\n              {isSupportedChain(chainId) && (\n                <>\n                  <ThemedText.SubHeaderSmall>\n                    <Trans>Pay with</Trans>\n                  </ThemedText.SubHeaderSmall>\n                  <CurrencyInput\n                    onClick={() => {\n                      if (!bagIsLocked) {\n                        setTokenSelectorOpen(true)\n                        sendAnalyticsEvent(NFTEventName.NFT_BUY_TOKEN_SELECTOR_CLICKED)\n                      }\n                    }}\n                  >\n                    <CurrencyLogo currency={activeCurrency} size=\"24px\" />\n                    <ThemedText.HeadlineSmall fontWeight={500} lineHeight=\"24px\">\n                      {activeCurrency?.symbol}\n                    </ThemedText.HeadlineSmall>\n                    <ChevronDown size={20} color={theme.textSecondary} />\n                  </CurrencyInput>\n                </>\n              )}\n            </Column>\n            <TotalColumn gap=\"xs\">\n              <ThemedText.SubHeaderSmall marginBottom=\"4px\">\n                <Trans>Total</Trans>\n              </ThemedText.SubHeaderSmall>\n              <InputCurrencyValue\n                usingPayWithAnyToken={usingPayWithAnyToken}\n                totalEthPrice={totalEthPrice}\n                activeCurrency={activeCurrency}\n                tradeState={tradeState}\n                trade={trade}\n              />\n            </TotalColumn>\n          </CurrencyRow>\n          <FiatValue\n            usdcValue={usdcValue}\n            priceImpact={priceImpact}\n            tradeState={tradeState}\n            usingPayWithAnyToken={usingPayWithAnyToken}\n          />\n        </FooterHeader>\n        <TraceEvent\n          events={[BrowserEvent.onClick]}\n          name={NFTEventName.NFT_BUY_BAG_PAY}\n          element={InterfaceElementName.NFT_BUY_BAG_PAY_BUTTON}\n          properties={{ ...traceEventProperties }}\n          shouldLogImpression={connected && !disabled}\n        >\n          <Warning color={warningTextColor}>{warningText}</Warning>\n          <Helper color={helperTextColor}>{helperText}</Helper>\n          <ActionButton\n            data-testid=\"nft-buy-button\"\n            onClick={handleClick}\n            disabled={disabled || isPending}\n            $backgroundColor={buttonColor}\n            $color={buttonTextColor}\n          >\n            {isPending && <Loader size=\"20px\" stroke=\"white\" />}\n            {buttonText}\n          </ActionButton>\n        </TraceEvent>\n      </Footer>\n      <CurrencySearchModal\n        isOpen={tokenSelectorOpen}\n        onDismiss={() => setTokenSelectorOpen(false)}\n        onCurrencySelect={(currency: Currency) => {\n          setInputCurrency(currency.isNative ? undefined : currency)\n          if (currency.isToken) {\n            sendAnalyticsEvent(NFTEventName.NFT_BUY_TOKEN_SELECTED, {\n              token_address: currency.address,\n              token_symbol: currency.symbol,\n            })\n          }\n        }}\n        selectedCurrency={activeCurrency ?? undefined}\n        onlyShowCurrenciesWithBalance={true}\n      />\n    </FooterContainer>\n  )\n}\n","import { BigNumber } from '@ethersproject/bignumber'\nimport { formatEther } from '@ethersproject/units'\nimport { useCurrency } from 'hooks/Tokens'\nimport { useStablecoinValue } from 'hooks/useStablecoinPrice'\nimport tryParseCurrencyAmount from 'lib/utils/tryParseCurrencyAmount'\nimport { BagItemStatus } from 'nft/types'\nimport { useMemo } from 'react'\n\nimport { useBag } from './useBag'\n\nexport function useBagTotalEthPrice(): BigNumber {\n  const itemsInBag = useBag((state) => state.itemsInBag)\n\n  return useMemo(() => {\n    const totalEthPrice = itemsInBag.reduce(\n      (total, item) =>\n        item.status !== BagItemStatus.UNAVAILABLE\n          ? total.add(\n              BigNumber.from(\n                item.asset.updatedPriceInfo ? item.asset.updatedPriceInfo.ETHPrice : item.asset.priceInfo.ETHPrice\n              )\n            )\n          : total,\n      BigNumber.from(0)\n    )\n\n    return totalEthPrice\n  }, [itemsInBag])\n}\n\nexport function useBagTotalUsdPrice(): string | undefined {\n  const totalEthPrice = useBagTotalEthPrice()\n  const defaultCurrency = useCurrency('ETH')\n\n  const parsedOutputAmount = useMemo(() => {\n    return tryParseCurrencyAmount(formatEther(totalEthPrice.toString()), defaultCurrency ?? undefined)\n  }, [defaultCurrency, totalEthPrice])\n\n  const usdcValue = useStablecoinValue(parsedOutputAmount)\n\n  return useMemo(() => {\n    return usdcValue?.toExact()\n  }, [usdcValue])\n}\n","import { BagStatus, TxStateType } from 'nft/types'\nimport { useEffect, useRef } from 'react'\nimport { shallow } from 'zustand/shallow'\n\nimport { useBag } from './useBag'\nimport { useSendTransaction } from './useSendTransaction'\n\nexport function useSubscribeTransactionState(setModalIsOpen: (isOpen: boolean) => void) {\n  const transactionState = useSendTransaction((state) => state.state)\n  const setTransactionState = useSendTransaction((state) => state.setState)\n  const transactionStateRef = useRef(transactionState)\n  const { setBagStatus, setLocked: setBagLocked } = useBag(\n    ({ setBagExpanded, setBagStatus, setLocked }) => ({\n      setBagExpanded,\n      setBagStatus,\n      setLocked,\n    }),\n    shallow\n  )\n\n  useEffect(() => {\n    useSendTransaction.subscribe((state) => (transactionStateRef.current = state.state))\n  }, [])\n\n  useEffect(() => {\n    if (transactionStateRef.current === TxStateType.Confirming) setBagStatus(BagStatus.PROCESSING_TRANSACTION)\n    if (transactionStateRef.current === TxStateType.Denied || transactionStateRef.current === TxStateType.Invalid) {\n      if (transactionStateRef.current === TxStateType.Invalid) {\n        setBagStatus(BagStatus.WARNING)\n      } else setBagStatus(BagStatus.CONFIRM_REVIEW)\n      setTransactionState(TxStateType.New)\n\n      setBagLocked(false)\n      setModalIsOpen(false)\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [setBagLocked, setBagStatus, setModalIsOpen, setTransactionState, transactionStateRef.current])\n}\n","import { useWeb3React } from '@web3-react/core'\nimport { useNftRouteLazyQuery } from 'graphql/data/__generated__/types-and-hooks'\nimport { BagStatus } from 'nft/types'\nimport { buildNftTradeInputFromBagItems, recalculateBagUsingPooledAssets } from 'nft/utils'\nimport { getNextBagState, getPurchasableAssets } from 'nft/utils/bag'\nimport { buildRouteResponse } from 'nft/utils/nftRoute'\nimport { useCallback, useMemo } from 'react'\nimport { shallow } from 'zustand/shallow'\n\nimport { useBag } from './useBag'\nimport { usePurchaseAssets } from './usePurchaseAssets'\nimport { useTokenInput } from './useTokenInput'\n\nexport function useFetchAssets(): () => Promise<void> {\n  const { account } = useWeb3React()\n\n  const {\n    itemsInBag: uncheckedItemsInBag,\n    setBagStatus,\n    didOpenUnavailableAssets,\n    setDidOpenUnavailableAssets,\n    isLocked: bagIsLocked,\n    setLocked: setBagLocked,\n    setItemsInBag,\n  } = useBag(\n    ({\n      itemsInBag,\n      setBagStatus,\n      didOpenUnavailableAssets,\n      setDidOpenUnavailableAssets,\n      isLocked,\n      setLocked,\n      setItemsInBag,\n    }) => ({\n      itemsInBag,\n      setBagStatus,\n      didOpenUnavailableAssets,\n      setDidOpenUnavailableAssets,\n      isLocked,\n      setLocked,\n      setItemsInBag,\n    }),\n    shallow\n  )\n  const tokenTradeInput = useTokenInput((state) => state.tokenTradeInput)\n  const itemsInBag = useMemo(() => recalculateBagUsingPooledAssets(uncheckedItemsInBag), [uncheckedItemsInBag])\n\n  const [fetchGqlRoute] = useNftRouteLazyQuery()\n  const purchaseAssets = usePurchaseAssets()\n\n  const resetStateBeforeFetch = useCallback(() => {\n    didOpenUnavailableAssets && setDidOpenUnavailableAssets(false)\n    !bagIsLocked && setBagLocked(true)\n    setBagStatus(BagStatus.FETCHING_ROUTE)\n  }, [bagIsLocked, didOpenUnavailableAssets, setBagLocked, setBagStatus, setDidOpenUnavailableAssets])\n\n  return useCallback(async () => {\n    resetStateBeforeFetch()\n\n    fetchGqlRoute({\n      variables: {\n        senderAddress: account ? account : '',\n        nftTrades: buildNftTradeInputFromBagItems(itemsInBag),\n        tokenTrades: tokenTradeInput ? tokenTradeInput : undefined,\n      },\n      onCompleted: (data) => {\n        if (!data.nftRoute || !data.nftRoute.route) {\n          setBagStatus(BagStatus.ADDING_TO_BAG)\n          setBagLocked(false)\n          return\n        }\n\n        const wishAssetsToBuy = getPurchasableAssets(itemsInBag)\n        const purchasingWithErc20 = !!tokenTradeInput\n        const { route, routeResponse } = buildRouteResponse(data.nftRoute, purchasingWithErc20)\n\n        const { newBagItems, nextBagStatus } = getNextBagState(wishAssetsToBuy, route, purchasingWithErc20)\n\n        setItemsInBag(newBagItems)\n        setBagStatus(nextBagStatus)\n\n        if (nextBagStatus === BagStatus.CONFIRMING_IN_WALLET) {\n          purchaseAssets(routeResponse, wishAssetsToBuy, purchasingWithErc20)\n          setBagLocked(true)\n          return\n        }\n\n        setBagLocked(false)\n      },\n    })\n  }, [\n    account,\n    fetchGqlRoute,\n    itemsInBag,\n    purchaseAssets,\n    resetStateBeforeFetch,\n    setBagLocked,\n    setBagStatus,\n    setItemsInBag,\n    tokenTradeInput,\n  ])\n}\n","import { useWeb3React } from '@web3-react/core'\nimport { RouteResponse, UpdatedGenieAsset } from 'nft/types'\nimport { useCallback } from 'react'\nimport { shallow } from 'zustand/shallow'\n\nimport { useBag } from './useBag'\nimport { useSendTransaction } from './useSendTransaction'\nimport { useTransactionResponse } from './useTransactionResponse'\n\nexport function usePurchaseAssets(): (\n  routingData: RouteResponse,\n  assetsToBuy: UpdatedGenieAsset[],\n  purchasingWithErc20?: boolean\n) => Promise<void> {\n  const { provider } = useWeb3React()\n  const sendTransaction = useSendTransaction((state) => state.sendTransaction)\n  const setTransactionResponse = useTransactionResponse((state) => state.setTransactionResponse)\n\n  const {\n    setLocked: setBagLocked,\n    setBagExpanded,\n    reset: resetBag,\n  } = useBag(\n    ({ setLocked, setBagExpanded, reset }) => ({\n      setLocked,\n      setBagExpanded,\n      reset,\n    }),\n    shallow\n  )\n\n  return useCallback(\n    async (routingData: RouteResponse, assetsToBuy: UpdatedGenieAsset[], purchasingWithErc20 = false) => {\n      if (!provider) return\n\n      const purchaseResponse = await sendTransaction(\n        provider.getSigner(),\n        assetsToBuy,\n        routingData,\n        purchasingWithErc20\n      )\n\n      if (purchaseResponse) {\n        setBagLocked(false)\n        setTransactionResponse(purchaseResponse)\n        setBagExpanded({ bagExpanded: false })\n        resetBag()\n      }\n    },\n    [provider, resetBag, sendTransaction, setBagExpanded, setBagLocked, setTransactionResponse]\n  )\n}\n","import { BagItem, BagItemStatus, BagStatus, RoutingItem, UpdatedGenieAsset } from 'nft/types'\n\nimport { compareAssetsWithTransactionRoute } from './txRoute/combineItemsWithTxRoute'\nimport { filterUpdatedAssetsByState } from './updatedAssets'\n\nexport function getPurchasableAssets(itemsInBag: BagItem[]): UpdatedGenieAsset[] {\n  return itemsInBag.filter((item) => item.status !== BagItemStatus.UNAVAILABLE).map((item) => item.asset)\n}\n\nfunction createBagFromUpdatedAssets(\n  unavailable: UpdatedGenieAsset[],\n  priceChanged: UpdatedGenieAsset[],\n  unchanged: UpdatedGenieAsset[]\n): BagItem[] {\n  return [\n    ...unavailable.map((unavailableAsset) => ({\n      asset: unavailableAsset,\n      status: BagItemStatus.UNAVAILABLE,\n    })),\n    ...priceChanged.map((changedAsset) => ({\n      asset: changedAsset,\n      status: BagItemStatus.REVIEWING_PRICE_CHANGE,\n    })),\n    ...unchanged.map((unchangedAsset) => ({\n      asset: unchangedAsset,\n      status: BagItemStatus.REVIEWED,\n    })),\n  ]\n}\n\nfunction evaluateNextBagState(\n  hasAssets: boolean,\n  shouldReview: boolean,\n  hasAssetsInReview: boolean,\n  shouldRefetchCalldata: boolean\n): BagStatus {\n  if (!hasAssets) {\n    return BagStatus.ADDING_TO_BAG\n  }\n\n  if (shouldReview) {\n    if (hasAssetsInReview) {\n      return BagStatus.IN_REVIEW\n    }\n\n    return BagStatus.CONFIRM_REVIEW\n  }\n\n  if (shouldRefetchCalldata) {\n    return BagStatus.CONFIRM_QUOTE\n  }\n\n  return BagStatus.CONFIRMING_IN_WALLET\n}\n\nexport function getNextBagState(\n  wishAssetsToBuy: UpdatedGenieAsset[],\n  route: RoutingItem[],\n  purchasingWithErc20: boolean\n): { newBagItems: BagItem[]; nextBagStatus: BagStatus } {\n  const { hasPriceAdjustment, updatedAssets } = compareAssetsWithTransactionRoute(wishAssetsToBuy, route)\n  const shouldRefetchCalldata = hasPriceAdjustment && purchasingWithErc20\n\n  const { unchanged, priceChanged, unavailable } = filterUpdatedAssetsByState(updatedAssets)\n\n  const hasAssets = updatedAssets.length > 0\n  const hasAssetsInReview = priceChanged.length > 0\n  const hasUnavailableAssets = unavailable.length > 0\n  const shouldReview = hasAssetsInReview || hasUnavailableAssets\n\n  const newBagItems = createBagFromUpdatedAssets(unavailable, priceChanged, unchanged)\n  const nextBagStatus = evaluateNextBagState(hasAssets, shouldReview, hasAssetsInReview, shouldRefetchCalldata)\n\n  return { newBagItems, nextBagStatus }\n}\n","import { Currency, CurrencyAmount, NativeCurrency, Percent, Token, TradeType } from '@uniswap/sdk-core'\nimport useAutoSlippageTolerance from 'hooks/useAutoSlippageTolerance'\nimport { useDebouncedTrade } from 'hooks/useDebouncedTrade'\nimport { useMemo } from 'react'\nimport { ClassicTrade, RouterPreference, TradeState } from 'state/routing/types'\nimport { isClassicTrade } from 'state/routing/utils'\n\nexport default function useDerivedPayWithAnyTokenSwapInfo(\n  inputCurrency?: Currency,\n  parsedOutputAmount?: CurrencyAmount<NativeCurrency | Token>\n): {\n  state: TradeState\n  trade?: ClassicTrade\n  maximumAmountIn?: CurrencyAmount<Token>\n  allowedSlippage: Percent\n} {\n  const { state, trade } = useDebouncedTrade(\n    TradeType.EXACT_OUTPUT,\n    parsedOutputAmount,\n    inputCurrency ?? undefined,\n    RouterPreference.API\n  )\n\n  const allowedSlippage = useAutoSlippageTolerance(isClassicTrade(trade) ? trade : undefined)\n  const maximumAmountIn = useMemo(() => {\n    const maximumAmountIn = trade?.maximumAmountIn(allowedSlippage)\n    return maximumAmountIn?.currency.isToken ? (maximumAmountIn as CurrencyAmount<Token>) : undefined\n  }, [allowedSlippage, trade])\n\n  return useMemo(() => {\n    return {\n      state,\n      trade,\n      maximumAmountIn,\n      allowedSlippage,\n    }\n  }, [allowedSlippage, maximumAmountIn, state, trade])\n}\n","import { Percent } from '@uniswap/sdk-core'\nimport { PermitInput, TokenTradeRoutesInput, TokenTradeType } from 'graphql/data/__generated__/types-and-hooks'\nimport { Allowance } from 'hooks/usePermit2Allowance'\nimport { buildAllTradeRouteInputs } from 'nft/utils/tokenRoutes'\nimport { useEffect } from 'react'\nimport { InterfaceTrade } from 'state/routing/types'\nimport { isClassicTrade } from 'state/routing/utils'\n\nimport { useTokenInput } from './useTokenInput'\n\nexport default function usePayWithAnyTokenSwap(\n  trade?: InterfaceTrade | undefined,\n  allowance?: Allowance,\n  allowedSlippage?: Percent\n) {\n  const setTokenTradeInput = useTokenInput((state) => state.setTokenTradeInput)\n  const hasRoutes = isClassicTrade(trade) && trade.routes\n  const hasInputAmount = !!trade && !!trade.inputAmount && trade.inputAmount.currency.isToken\n  const hasAllowance = !!allowedSlippage && !!allowance\n\n  useEffect(() => {\n    if (!hasRoutes || !hasInputAmount || !hasAllowance) {\n      setTokenTradeInput(undefined)\n      return\n    }\n\n    const slippage = parseInt(allowedSlippage.multiply(100).toSignificant(2))\n\n    const { mixedTokenTradeRouteInputs, v2TokenTradeRouteInputs, v3TokenTradeRouteInputs } =\n      buildAllTradeRouteInputs(trade)\n\n    const routes: TokenTradeRoutesInput = {\n      mixedRoutes: mixedTokenTradeRouteInputs,\n      tradeType: TokenTradeType.ExactOutput,\n      v2Routes: v2TokenTradeRouteInputs,\n      v3Routes: v3TokenTradeRouteInputs,\n    }\n\n    const permitInput: PermitInput | undefined =\n      'permitSignature' in allowance && allowance.permitSignature\n        ? {\n            details: {\n              amount: allowance.permitSignature.details.amount.toString(),\n              expiration: allowance.permitSignature.details.expiration.toString(),\n              nonce: allowance.permitSignature.details.nonce.toString(),\n              token: allowance.permitSignature.details.token,\n            },\n            sigDeadline: allowance.permitSignature.sigDeadline.toString(),\n            signature: allowance.permitSignature.signature,\n            spender: allowance.permitSignature.spender,\n          }\n        : undefined\n\n    setTokenTradeInput({\n      permit: permitInput,\n      routes,\n      slippageToleranceBasisPoints: slippage,\n      tokenAmount: {\n        amount: trade.inputAmount.quotient.toString(),\n        token: {\n          address: trade.inputAmount.currency.address,\n          chainId: trade.inputAmount.currency.chainId,\n          decimals: trade.inputAmount.currency.decimals,\n          isNative: trade.inputAmount.currency.isNative,\n        },\n      },\n    })\n  }, [allowance, allowedSlippage, hasAllowance, hasInputAmount, hasRoutes, setTokenTradeInput, trade])\n}\n","import { Percent } from '@uniswap/sdk-core'\nimport { useMemo } from 'react'\nimport { ClassicTrade } from 'state/routing/types'\nimport { useTheme } from 'styled-components'\nimport { computeRealizedPriceImpact, getPriceImpactWarning } from 'utils/prices'\n\nexport interface PriceImpact {\n  priceImpactSeverity: PriceImpactSeverity\n  displayPercentage(): string\n}\n\ninterface PriceImpactSeverity {\n  type: 'warning' | 'error'\n  color: string\n}\n\nexport function usePriceImpact(trade?: ClassicTrade): PriceImpact | undefined {\n  const theme = useTheme()\n\n  return useMemo(() => {\n    const marketPriceImpact = trade ? computeRealizedPriceImpact(trade) : undefined\n    const priceImpactWarning = marketPriceImpact ? getPriceImpactWarning(marketPriceImpact) : undefined\n    const warningColor =\n      priceImpactWarning === 'error'\n        ? theme.accentCritical\n        : priceImpactWarning === 'warning'\n        ? theme.accentWarning\n        : undefined\n\n    return marketPriceImpact && priceImpactWarning && warningColor\n      ? {\n          priceImpactSeverity: {\n            type: priceImpactWarning,\n            color: warningColor,\n          },\n          displayPercentage: () => toHumanReadablePercent(marketPriceImpact),\n        }\n      : undefined\n  }, [theme.accentCritical, theme.accentWarning, trade])\n}\n\nfunction toHumanReadablePercent(priceImpact: Percent): string {\n  const sign = priceImpact.lessThan(0) ? '+' : ''\n  const exactFloat = (Number(priceImpact.numerator) / Number(priceImpact.denominator)) * 100\n  if (exactFloat < 0.005) {\n    return '0.00%'\n  }\n  const number = parseFloat(priceImpact.multiply(-1)?.toFixed(2))\n  return `${sign}${number}%`\n}\n","import { Box } from 'nft/components/Box'\nimport styled, { keyframes } from 'styled-components'\n\nconst dash = keyframes`\n  0% {\n    stroke-dashoffset: 1000;\n  }\n  100% {\n    stroke-dashoffset: 0;\n  }\n`\nconst Circle = styled.circle`\n  stroke-dasharray: 1000;\n  stroke-dashoffset: 0;\n  -webkit-animation: ${dash} linear;\n  animation: ${dash} linear;\n  animation-duration: 160s;\n  stroke: ${({ theme }) => theme.accentAction};\n`\nexport const TimedLoader = () => {\n  const stroke = 1.5\n\n  return (\n    <Box display=\"flex\" position=\"absolute\">\n      <svg height=\"18px\" width=\"18px\">\n        <Circle\n          strokeWidth={`${stroke}`}\n          strokeLinecap=\"round\"\n          style={{\n            transform: 'rotate(90deg)',\n            transformOrigin: '50% 50%',\n          }}\n          fill=\"transparent\"\n          r=\"8px\"\n          cx=\"9px\"\n          cy=\"9px\"\n        />\n      </svg>\n    </Box>\n  )\n}\n","import { Trans } from '@lingui/macro'\nimport Row from 'components/Row'\nimport { getHeightFromAspectRatio, getMediaAspectRatio, handleUniformAspectRatio } from 'nft/components/card/utils'\nimport { UniformAspectRatio, UniformAspectRatios } from 'nft/types'\nimport { ReactNode, useEffect, useRef, useState } from 'react'\nimport { Pause, Play } from 'react-feather'\nimport styled from 'styled-components'\nimport { BREAKPOINTS, ThemedText } from 'theme'\nimport { colors } from 'theme/colors'\n\nconst StyledImageContainer = styled.div<{ isDisabled?: boolean }>`\n  position: relative;\n  pointer-events: auto;\n  &:hover {\n    opacity: ${({ isDisabled, theme }) => (isDisabled ? theme.opacity.disabled : theme.opacity.enabled)};\n  }\n  cursor: ${({ isDisabled }) => (isDisabled ? 'default' : 'pointer')};\n`\n\nexport const MediaContainer = ({ isDisabled, children }: { isDisabled: boolean; children: ReactNode }) => {\n  return <StyledImageContainer isDisabled={isDisabled}>{children}</StyledImageContainer>\n}\n\ninterface ImageProps {\n  src?: string\n  uniformAspectRatio?: UniformAspectRatio\n  setUniformAspectRatio?: (uniformAspectRatio: UniformAspectRatio) => void\n  renderedHeight?: number\n  setRenderedHeight?: (renderedHeight: number | undefined) => void\n}\n\nconst StyledMediaContainer = styled(Row)`\n  overflow: hidden;\n  border-top-left-radius: 12px;\n  border-top-right-radius: 12px;\n`\n\nexport const StyledImage = styled.img<{\n  imageLoading: boolean\n  $aspectRatio?: string\n  $hidden?: boolean\n}>`\n  width: 100%;\n  aspect-ratio: ${({ $aspectRatio }) => $aspectRatio};\n  transition: ${({ theme }) => `${theme.transition.duration.medium} ${theme.transition.timing.ease} transform`};\n  will-change: transform;\n  object-fit: contain;\n  visibility: ${({ $hidden }) => ($hidden ? 'hidden' : 'visible')};\n  background: ${({ theme, imageLoading }) =>\n    imageLoading && `linear-gradient(270deg, ${theme.backgroundOutline} 0%, ${theme.backgroundSurface} 100%)`};\n`\n\nexport const NftImage = ({\n  src,\n  uniformAspectRatio = UniformAspectRatios.square,\n  setUniformAspectRatio,\n  renderedHeight,\n  setRenderedHeight,\n}: ImageProps) => {\n  const [noContent, setNoContent] = useState(!src)\n  const [loaded, setLoaded] = useState(false)\n\n  if (noContent) {\n    return <NoContentContainer height={getHeightFromAspectRatio(uniformAspectRatio, renderedHeight)} />\n  }\n\n  return (\n    <StyledMediaContainer>\n      <StyledImage\n        src={src}\n        $aspectRatio={getMediaAspectRatio(uniformAspectRatio, setUniformAspectRatio)}\n        imageLoading={!loaded}\n        draggable={false}\n        onError={() => setNoContent(true)}\n        onLoad={(e) => {\n          handleUniformAspectRatio(uniformAspectRatio, e, setUniformAspectRatio, renderedHeight, setRenderedHeight)\n          setLoaded(true)\n        }}\n      />\n    </StyledMediaContainer>\n  )\n}\n\ninterface MediaProps {\n  isAudio?: boolean\n  mediaSrc?: string\n  tokenId?: string\n  shouldPlay: boolean\n  setCurrentTokenPlayingMedia: (tokenId: string | undefined) => void\n}\n\nconst PlaybackButton = styled.div<{ pauseButton?: boolean }>`\n  display: ${({ pauseButton }) => (pauseButton ? 'block' : 'none')};\n  color: ${({ theme }) => theme.accentAction};\n  position: absolute;\n  height: 40px;\n  width: 40px;\n  z-index: 1;\n  margin-left: calc(100% - 50px);\n  transform: translateY(-76px);\n\n  @media screen and (max-width: ${BREAKPOINTS.sm}px) {\n    display: block;\n  }\n\n  ${StyledImageContainer}:hover & {\n    display: block;\n  }\n`\n\nconst StyledVideo = styled.video<{\n  $aspectRatio?: string\n}>`\n  width: 100%;\n  aspect-ratio: ${({ $aspectRatio }) => $aspectRatio};\n`\n\nconst StyledInnerMediaContainer = styled(Row)`\n  position: absolute;\n  left: 0px;\n  top: 0px;\n`\n\nconst StyledAudio = styled.audio`\n  width: 100%;\n  height: 100%;\n`\n\nexport const NftPlayableMedia = ({\n  isAudio,\n  src,\n  mediaSrc,\n  tokenId,\n  uniformAspectRatio = UniformAspectRatios.square,\n  setUniformAspectRatio,\n  renderedHeight,\n  setRenderedHeight,\n  shouldPlay,\n  setCurrentTokenPlayingMedia,\n}: MediaProps & ImageProps) => {\n  const mediaRef = useRef<HTMLVideoElement>(null)\n  const [noContent, setNoContent] = useState(!src)\n  const [imageLoaded, setImageLoaded] = useState(false)\n\n  useEffect(() => {\n    if (shouldPlay && mediaRef.current) {\n      mediaRef.current.play()\n    } else if (!shouldPlay && mediaRef.current) {\n      mediaRef.current.pause()\n    }\n  }, [shouldPlay])\n\n  if (noContent) {\n    return <NoContentContainer height={getHeightFromAspectRatio(uniformAspectRatio, renderedHeight)} />\n  }\n\n  return (\n    <>\n      <StyledMediaContainer>\n        <StyledImage\n          src={src}\n          $aspectRatio={getMediaAspectRatio(uniformAspectRatio, setUniformAspectRatio)}\n          imageLoading={!imageLoaded}\n          draggable={false}\n          onError={() => setNoContent(true)}\n          onLoad={(e) => {\n            handleUniformAspectRatio(uniformAspectRatio, e, setUniformAspectRatio, renderedHeight, setRenderedHeight)\n            setImageLoaded(true)\n          }}\n          $hidden={shouldPlay && !isAudio}\n        />\n      </StyledMediaContainer>\n      {shouldPlay ? (\n        <>\n          <PlaybackButton pauseButton={true}>\n            <Pause\n              size=\"24px\"\n              onClick={(e) => {\n                e.preventDefault()\n                e.stopPropagation()\n                setCurrentTokenPlayingMedia(undefined)\n              }}\n            />\n          </PlaybackButton>\n          <StyledInnerMediaContainer>\n            {isAudio ? (\n              <StyledAudio\n                ref={mediaRef}\n                onEnded={(e) => {\n                  e.preventDefault()\n                  setCurrentTokenPlayingMedia(undefined)\n                }}\n              >\n                <source src={mediaSrc} />\n              </StyledAudio>\n            ) : (\n              <StyledVideo\n                $aspectRatio={getMediaAspectRatio(uniformAspectRatio, setUniformAspectRatio)}\n                ref={mediaRef}\n                onEnded={(e) => {\n                  e.preventDefault()\n                  setCurrentTokenPlayingMedia(undefined)\n                }}\n                loop\n                playsInline\n              >\n                <source src={mediaSrc} />\n              </StyledVideo>\n            )}\n          </StyledInnerMediaContainer>\n        </>\n      ) : (\n        <PlaybackButton>\n          <Play\n            size=\"24px\"\n            onClick={(e) => {\n              e.preventDefault()\n              e.stopPropagation()\n              setCurrentTokenPlayingMedia(tokenId)\n            }}\n          />\n        </PlaybackButton>\n      )}\n    </>\n  )\n}\n\nconst NoContentContainerBackground = styled.div<{ $height?: number }>`\n  position: relative;\n  width: 100%;\n  height: ${({ $height }) => ($height ? `${$height}px` : 'auto')};\n  padding-top: 100%;\n  background: ${({ theme }) =>\n    `linear-gradient(90deg, ${theme.backgroundSurface} 0%, ${theme.backgroundInteractive} 95.83%)`};\n`\n\nconst NoContentText = styled(ThemedText.BodyPrimary)`\n  position: absolute;\n  text-align: center;\n  left: 50%;\n  top: 50%;\n  transform: translate3d(-50%, -50%, 0);\n  color: ${colors.gray500};\n`\n\nconst NoContentContainer = ({ height }: { height?: number }) => (\n  <>\n    <NoContentContainerBackground $height={height}>\n      <NoContentText>\n        <Trans>Content not</Trans>\n        <br />\n        <Trans>available yet</Trans>\n      </NoContentText>\n    </NoContentContainerBackground>\n  </>\n)\n","import { Trans } from '@lingui/macro'\nimport Row from 'components/Row'\nimport { MouseoverTooltip } from 'components/Tooltip'\nimport { NftStandard } from 'graphql/data/__generated__/types-and-hooks'\nimport { getMarketplaceIcon } from 'nft/components/card/utils'\nimport { CollectionSelectedAssetIcon } from 'nft/components/icons'\nimport { Markets } from 'nft/types'\nimport { putCommas } from 'nft/utils'\nimport { AlertTriangle, Check, Tag } from 'react-feather'\nimport styled from 'styled-components'\nimport { ThemedText } from 'theme'\n\nconst StyledMarketplaceContainer = styled.div<{ isText?: boolean }>`\n  position: absolute;\n  display: flex;\n  top: 12px;\n  left: 12px;\n  height: 32px;\n  width: ${({ isText }) => (isText ? 'auto' : '32px')};\n  padding: ${({ isText }) => (isText ? '0px 8px' : '0px')};\n  background: rgba(93, 103, 133, 0.24);\n  color: ${({ theme }) => theme.accentTextLightPrimary};\n  justify-content: center;\n  align-items: center;\n  border-radius: 32px;\n  z-index: 2;\n`\n\nconst ListPriceRowContainer = styled(Row)`\n  gap: 6px;\n  color: ${({ theme }) => theme.accentTextLightPrimary};\n  font-size: 14px;\n  font-weight: 600;\n  line-height: 16px;\n  text-shadow: 1px 1px 3px rgba(51, 53, 72, 0.54);\n`\n\nexport const MarketplaceContainer = ({\n  isSelected,\n  marketplace,\n  tokenType,\n  listedPrice,\n  hidePrice,\n}: {\n  isSelected: boolean\n  marketplace?: Markets\n  tokenType?: NftStandard\n  listedPrice?: string\n  hidePrice?: boolean\n}) => {\n  if (isSelected) {\n    if (!marketplace) {\n      return (\n        <StyledMarketplaceContainer>\n          <Check size={20} />\n        </StyledMarketplaceContainer>\n      )\n    }\n\n    return (\n      <StyledMarketplaceContainer>\n        <CollectionSelectedAssetIcon width=\"20px\" height=\"20px\" viewBox=\"0 0 20 20\" />\n      </StyledMarketplaceContainer>\n    )\n  }\n\n  if (listedPrice && !hidePrice) {\n    return (\n      <StyledMarketplaceContainer isText={true}>\n        <ListPriceRowContainer>\n          <Tag size={20} />\n          {listedPrice} ETH\n        </ListPriceRowContainer>\n      </StyledMarketplaceContainer>\n    )\n  }\n\n  if (!marketplace || tokenType === NftStandard.Erc1155) {\n    return null\n  }\n\n  return <StyledMarketplaceContainer>{getMarketplaceIcon(marketplace)}</StyledMarketplaceContainer>\n}\n\nconst SuspiciousIcon = styled(AlertTriangle)`\n  width: 16px;\n  height: 16px;\n  color: ${({ theme }) => theme.accentFailure};\n`\n\ninterface RankingProps {\n  provider: { url?: string; rank?: number }\n}\n\nconst RarityLogoContainer = styled(Row)`\n  margin-right: 8px;\n  width: 16px;\n`\n\nconst RarityText = styled(ThemedText.BodySmall)`\n  display: flex;\n`\n\nconst RarityInfo = styled(ThemedText.Caption)`\n  flex-shrink: 0;\n  color: ${({ theme }) => theme.textSecondary};\n  background: ${({ theme }) => theme.backgroundInteractive};\n  padding: 4px 6px;\n  border-radius: 4px;\n  font-weight: 700 !important;\n  line-height: 12px;\n  text-align: right;\n  cursor: pointer;\n`\n\nexport const Ranking = ({ provider }: RankingProps) => {\n  if (!provider.rank) {\n    return null\n  }\n\n  return (\n    <RarityInfo>\n      <MouseoverTooltip\n        text={\n          <Row>\n            <RarityLogoContainer>\n              <img src=\"/nft/svgs/gem.svg\" width={16} height={16} />\n            </RarityLogoContainer>\n            <RarityText>Ranking by Rarity Sniper</RarityText>\n          </Row>\n        }\n        placement=\"top\"\n      >\n        # {putCommas(provider.rank)}\n      </MouseoverTooltip>\n    </RarityInfo>\n  )\n}\n\nconst SuspiciousIconContainer = styled(Row)`\n  flex-shrink: 0;\n`\n\nexport const Suspicious = () => {\n  return (\n    <MouseoverTooltip\n      text={\n        <ThemedText.BodySmall>\n          <Trans>Blocked on OpenSea</Trans>\n        </ThemedText.BodySmall>\n      }\n      placement=\"top\"\n    >\n      <SuspiciousIconContainer>\n        <SuspiciousIcon />\n      </SuspiciousIconContainer>\n    </MouseoverTooltip>\n  )\n}\n","import \"src/nft/css/sprinkles.css.ts.vanilla.css!=!../../../../node_modules/@vanilla-extract/webpack-plugin/virtualFileLoader/dist/vanilla-extract-webpack-plugin-virtualFileLoader.cjs.js?{\\\"fileName\\\":\\\"src/nft/css/sprinkles.css.ts.vanilla.css\\\",\\\"source\\\":\\\"#\\\"}!../../../../node_modules/@vanilla-extract/webpack-plugin/extracted.js\"\nimport \"src/nft/css/common.css.ts.vanilla.css!=!../../../../node_modules/@vanilla-extract/webpack-plugin/virtualFileLoader/dist/vanilla-extract-webpack-plugin-virtualFileLoader.cjs.js?{\\\"fileName\\\":\\\"src/nft/css/common.css.ts.vanilla.css\\\",\\\"source\\\":\\\"Ll8xMjdsOGhkYTo6YmVmb3JlIHsKICBjb250ZW50OiAiIjsKICBwb3NpdGlvbjogYWJzb2x1dGU7CiAgaW5zZXQ6IC0xcHg7CiAgYmFja2dyb3VuZDogbGluZWFyLWdyYWRpZW50KDkxLjQ2ZGVnLCAjNDY3M0ZBIDAlLCAjOTY0NkZBIDEwMC4xMyUpIGJvcmRlci1ib3g7CiAgYm9yZGVyLWNvbG9yOiB0cmFuc3BhcmVudDsKICAtd2Via2l0LW1hc2s6IGxpbmVhci1ncmFkaWVudCgjZmZmIDAgMCkgcGFkZGluZy1ib3gsIGxpbmVhci1ncmFkaWVudCgjZmZmIDAgMCk7OwogIC13ZWJraXQtbWFzay1jb21wb3NpdGU6IHhvcjs7CiAgbWFzay1jb21wb3NpdGU6IGV4Y2x1ZGU7CiAgYm9yZGVyLXN0eWxlOiBzb2xpZDsKICBib3JkZXItd2lkdGg6IDFweDsKICBib3JkZXItcmFkaXVzOiBpbmhlcml0OwogIHBvaW50ZXItZXZlbnRzOiBub25lOwp9Ci5fMTI3bDhoZGI6OmJlZm9yZSB7CiAgb3BhY2l0eTogMDsKICAtd2Via2l0LXRyYW5zaXRpb246IG9wYWNpdHkgMC4yNXMgZWFzZTsKICAtbW96LXRyYW5zaXRpb246IG9wYWNpdHkgMC4yNXMgZWFzZTsKICAtbXMtdHJhbnNpdGlvbjogb3BhY2l0eSAwLjI1cyBlYXNlOwogIHRyYW5zaXRpb246IG9wYWNpdHkgMC4yNXMgZWFzZS1vdXQ7Cn0KLl8xMjdsOGhkYjpob3Zlcjo6YmVmb3JlIHsKICBvcGFjaXR5OiAxOwp9Ci5fMTI3bDhoZGQ6aG92ZXIgewogIGJhY2tncm91bmQ6IHZhcigtLXJndzZlejF4KTsKfQ==\\\"}!../../../../node_modules/@vanilla-extract/webpack-plugin/extracted.js\"\nimport \"src/nft/components/bag/BagRow.css.ts.vanilla.css!=!../../../../node_modules/@vanilla-extract/webpack-plugin/virtualFileLoader/dist/vanilla-extract-webpack-plugin-virtualFileLoader.cjs.js?{\\\"fileName\\\":\\\"src/nft/components/bag/BagRow.css.ts.vanilla.css\\\",\\\"source\\\":\\\"Ll8xa3Vhd2MxIHsKICBtYXJnaW4tbGVmdDogLTRweDsKICBtYXJnaW4tcmlnaHQ6IC00cHg7Cn0KLl8xa3Vhd2MxOmhvdmVyIHsKICBiYWNrZ3JvdW5kOiB2YXIoLS1nZW5pZS1jb2xvcnMtc3RhdGVPdmVybGF5SG92ZXIpOwp9Ci5fMWt1YXdjNyB7CiAgZmlsdGVyOiBncmF5c2NhbGUoMTAwJSk7Cn0KLl8xa3Vhd2M5IHsKICBsaW5lLWhlaWdodDogMjRweDsKfQouXzFrdWF3Y2IgewogIGxpbmUtaGVpZ2h0OiAyNHB4Owp9\\\"}!../../../../node_modules/@vanilla-extract/webpack-plugin/extracted.js\"\nexport var assetName = '_1kuawcb rgw6ezb4 rgw6ezcy rgw6ez7pi rgw6ez45y rgw6ez45s';\nexport var bagRow = '_1kuawc1 rgw6ez2dy rgw6ez2jg rgw6ez2om rgw6ez284 rgw6ez4em rgw6ez3tm rgw6ez7d2 rgw6ez1dy rgw6ez7em';\nexport var bagRowImage = 'rgw6ez14g rgw6ez1bg rgw6ez49s rgw6ez7ee';\nexport var bagRowPrice = '_1kuawc9 rgw6ez3sy rgw6ezb4 rgw6ezd4 rgw6ez3xy';\nexport var collectionName = 'rgw6ezcs rgw6ezay rgw6ezea rgw6ez7pi rgw6ez45s rgw6ez45y rgw6ez4ey';\nexport var grayscaleImage = '_1kuawc7';\nexport var icon = 'rgw6ez3xy';\nexport var priceChangeColumn = 'rgw6ez2pa rgw6ez28s rgw6ezlm rgw6ezr4 rgw6ez4t4 rgw6ez3ta rgw6ez4em rgw6ez7de rgw6ez7n6 rgw6ez554 rgw6ez5q4 rgw6ez1dy rgw6ez7d2';\nexport var priceChangeRow = 'rgw6ezcs rgw6ezay rgw6ezea rgw6ez4cg rgw6ez3sy';\nexport var unavailableAssetsContainer = 'rgw6ez2pa rgw6ez28s rgw6ezlm rgw6ezr4 rgw6ez4t4 rgw6ez3tm rgw6ez4em rgw6ez7de rgw6ez7n6 rgw6ez554 rgw6ez62a rgw6ez5q4 rgw6ez1dy';","import { BigNumber } from '@ethersproject/bignumber'\nimport { formatEther } from '@ethersproject/units'\nimport clsx from 'clsx'\nimport { ButtonEmphasis, ButtonSize, ThemeButton } from 'components/Button'\nimport { TimedLoader } from 'nft/components/bag/TimedLoader'\nimport { Box } from 'nft/components/Box'\nimport { Suspicious } from 'nft/components/card/icons'\nimport { Column, Row } from 'nft/components/Flex'\nimport {\n  ChevronDownBagIcon,\n  ChevronUpBagIcon,\n  CircularCloseIcon,\n  CloseTimerIcon,\n  SquareArrowDownIcon,\n  SquareArrowUpIcon,\n  VerifiedIcon,\n} from 'nft/components/icons'\nimport { bodySmall } from 'nft/css/common.css'\nimport { loadingBlock } from 'nft/css/loading.css'\nimport { GenieAsset, UpdatedGenieAsset } from 'nft/types'\nimport { ethNumberStandardFormatter, formatWeiToDecimal, getAssetHref } from 'nft/utils'\nimport { MouseEvent, useCallback, useEffect, useReducer, useState } from 'react'\nimport { Link } from 'react-router-dom'\nimport styled from 'styled-components'\n\nimport * as styles from './BagRow.css'\n\nexport const RemoveButton = styled(ThemeButton)`\n  border-radius: 12px;\n  font-size: 14px;\n  line-height: 16px;\n  margin-left: 16px;\n  padding: 12px 14px;\n`\nconst ReviewButton = styled(ThemeButton)`\n  border-radius: 12px;\n  flex: 1 1 auto;\n  font-size: 14px;\n  padding: 8px;\n  width: 50%;\n`\nconst RemoveAssetOverlay = styled.div`\n  position: absolute;\n  display: block;\n  right: -11px;\n  top: -11px;\n  z-index: 1;\n  transition: 250ms;\n  width: 45px;\n  height: 45px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n`\n\nexport const RemoveAssetButton = ({ onClick }: { onClick: (e: MouseEvent<HTMLDivElement>) => void }) => (\n  <RemoveAssetOverlay onClick={onClick}>\n    <CircularCloseIcon />\n  </RemoveAssetOverlay>\n)\n\nconst NoContentContainer = () => (\n  <Box position=\"relative\" background=\"loadingBackground\" className={styles.bagRowImage}>\n    <Box\n      position=\"absolute\"\n      textAlign=\"center\"\n      left=\"1/2\"\n      top=\"1/2\"\n      style={{ transform: 'translate3d(-50%, -50%, 0)' }}\n      color=\"gray500\"\n      fontSize=\"12\"\n      fontWeight=\"normal\"\n    >\n      Image\n      <br />\n      not\n      <br />\n      available\n    </Box>\n  </Box>\n)\n\ninterface BagRowProps {\n  asset: UpdatedGenieAsset\n  usdPrice?: number\n  removeAsset: (assets: GenieAsset[]) => void\n  showRemove?: boolean\n  grayscale?: boolean\n  isMobile: boolean\n}\n\nexport const BagRow = ({ asset, usdPrice, removeAsset, showRemove, grayscale, isMobile }: BagRowProps) => {\n  const [loadedImage, setImageLoaded] = useState(false)\n  const [noImageAvailable, setNoImageAvailable] = useState(!asset.smallImageUrl)\n\n  const [cardHovered, setCardHovered] = useState(false)\n  const handleMouseEnter = useCallback(() => setCardHovered(true), [])\n  const handleMouseLeave = useCallback(() => setCardHovered(false), [])\n  const showRemoveButton = Boolean(showRemove && cardHovered && !isMobile)\n\n  const assetEthPrice = asset.updatedPriceInfo ? asset.updatedPriceInfo.ETHPrice : asset.priceInfo.ETHPrice\n  const assetEthPriceFormatted = formatWeiToDecimal(assetEthPrice)\n  const assetUSDPriceFormatted = ethNumberStandardFormatter(\n    usdPrice ? parseFloat(formatEther(assetEthPrice)) * usdPrice : usdPrice,\n    true\n  )\n\n  const handleRemoveClick = useCallback(\n    (e: MouseEvent<HTMLElement>) => {\n      e.preventDefault()\n      e.stopPropagation()\n      removeAsset([asset])\n    },\n    [asset, removeAsset]\n  )\n\n  return (\n    <Link to={getAssetHref(asset)} style={{ textDecoration: 'none' }}>\n      <Row className={styles.bagRow} onMouseEnter={handleMouseEnter} onMouseLeave={handleMouseLeave}>\n        <Box position=\"relative\" display=\"flex\">\n          {showRemove && isMobile && <RemoveAssetButton onClick={handleRemoveClick} />}\n          {!noImageAvailable && (\n            <Box\n              as=\"img\"\n              src={asset.smallImageUrl}\n              alt={asset.name}\n              className={clsx(styles.bagRowImage, grayscale && !cardHovered && styles.grayscaleImage)}\n              onLoad={() => {\n                setImageLoaded(true)\n              }}\n              onError={() => {\n                setNoImageAvailable(true)\n              }}\n              visibility={loadedImage ? 'visible' : 'hidden'}\n            />\n          )}\n          {!loadedImage && <Box position=\"absolute\" className={`${styles.bagRowImage} ${loadingBlock}`} />}\n          {noImageAvailable && <NoContentContainer />}\n        </Box>\n        <Column overflow=\"hidden\" width=\"full\" color={grayscale ? 'textSecondary' : 'textPrimary'}>\n          <Row overflow=\"hidden\" width=\"full\" whiteSpace=\"nowrap\">\n            <Box className={styles.assetName}>{asset.name ?? `#${asset.tokenId}`}</Box>\n            {asset.susFlag && <Suspicious />}\n          </Row>\n          <Row overflow=\"hidden\" whiteSpace=\"nowrap\" gap=\"2\">\n            <Box className={styles.collectionName}>{asset.collectionName}</Box>\n            {asset.collectionIsVerified && <VerifiedIcon className={styles.icon} />}\n          </Row>\n        </Column>\n        {showRemoveButton && (\n          <RemoveButton onClick={handleRemoveClick} emphasis={ButtonEmphasis.medium} size={ButtonSize.medium}>\n            Remove\n          </RemoveButton>\n        )}\n        {(!showRemoveButton || isMobile) && (\n          <Column flexShrink=\"0\" alignItems=\"flex-end\">\n            <Box className={styles.bagRowPrice}>\n              {assetEthPriceFormatted}\n              &nbsp;ETH\n            </Box>\n            <Box className={styles.collectionName}>{assetUSDPriceFormatted}</Box>\n          </Column>\n        )}\n      </Row>\n    </Link>\n  )\n}\n\ninterface PriceChangeBagRowProps {\n  asset: UpdatedGenieAsset\n  usdPrice?: number\n  markAssetAsReviewed: (asset: UpdatedGenieAsset, toKeep: boolean) => void\n  top?: boolean\n  isMobile: boolean\n}\n\nexport const PriceChangeBagRow = ({ asset, usdPrice, markAssetAsReviewed, top, isMobile }: PriceChangeBagRowProps) => {\n  const isPriceIncrease = BigNumber.from(asset.updatedPriceInfo?.ETHPrice).gt(BigNumber.from(asset.priceInfo.ETHPrice))\n  const handleRemove = useCallback(\n    (e: MouseEvent<HTMLButtonElement>) => {\n      e.preventDefault()\n      e.stopPropagation()\n      const toKeep = false\n      markAssetAsReviewed(asset, toKeep)\n    },\n    [asset, markAssetAsReviewed]\n  )\n  const handleKeep = useCallback(\n    (e: MouseEvent<HTMLButtonElement>) => {\n      e.preventDefault()\n      e.stopPropagation()\n      const toKeep = true\n      markAssetAsReviewed(asset, toKeep)\n    },\n    [asset, markAssetAsReviewed]\n  )\n  return (\n    <Column className={styles.priceChangeColumn} borderTopColor={top ? 'backgroundOutline' : 'transparent'}>\n      <Row className={styles.priceChangeRow}>\n        {isPriceIncrease ? <SquareArrowUpIcon /> : <SquareArrowDownIcon />}\n        <Box>{`Price ${isPriceIncrease ? 'increased' : 'decreased'} from ${formatWeiToDecimal(\n          asset.priceInfo.ETHPrice\n        )} ETH`}</Box>\n      </Row>\n      <Box style={{ marginLeft: '-8px', marginRight: '-8px' }}>\n        <BagRow asset={asset} usdPrice={usdPrice} removeAsset={() => undefined} isMobile={isMobile} />\n      </Box>\n      <Row gap=\"8\" justifyContent=\"space-between\">\n        <ReviewButton onClick={handleRemove} emphasis={ButtonEmphasis.medium} size={ButtonSize.small}>\n          Remove\n        </ReviewButton>\n        <ReviewButton onClick={handleKeep} emphasis={ButtonEmphasis.high} size={ButtonSize.small}>\n          Keep\n        </ReviewButton>\n      </Row>\n    </Column>\n  )\n}\n\ninterface UnavailableAssetsHeaderRowProps {\n  assets?: UpdatedGenieAsset[]\n  usdPrice?: number\n  clearUnavailableAssets: () => void\n  didOpenUnavailableAssets: boolean\n  setDidOpenUnavailableAssets: (didOpen: boolean) => void\n  isMobile: boolean\n}\n\ninterface UnavailableAssetsPreviewProps {\n  assets: UpdatedGenieAsset[]\n}\n\nconst ASSET_PREVIEW_WIDTH = 32\nconst ASSET_PREVIEW_OFFSET = 20\n\nconst UnavailableAssetsPreview = ({ assets }: UnavailableAssetsPreviewProps) => (\n  <Column\n    display=\"grid\"\n    style={{\n      gridTemplateColumns: `repeat(${assets.length}, 20px)`,\n      width: `${ASSET_PREVIEW_WIDTH + (assets.length - 1) * ASSET_PREVIEW_OFFSET}px`,\n    }}\n  >\n    {assets.map((asset, index) => (\n      <Box\n        key={`${asset.address}-${asset.tokenId}`}\n        as=\"img\"\n        src={asset.smallImageUrl}\n        width=\"32\"\n        height=\"32\"\n        borderStyle=\"solid\"\n        borderWidth=\"1px\"\n        borderColor=\"backgroundSurface\"\n        borderRadius=\"4\"\n        style={{ zIndex: index }}\n        className={styles.grayscaleImage}\n      />\n    ))}\n  </Column>\n)\n\nexport const UnavailableAssetsHeaderRow = ({\n  assets,\n  usdPrice,\n  clearUnavailableAssets,\n  didOpenUnavailableAssets,\n  setDidOpenUnavailableAssets,\n  isMobile,\n}: UnavailableAssetsHeaderRowProps) => {\n  const [isOpen, toggleOpen] = useReducer((s) => !s, false)\n  const timerLimit = 8\n  const [timeLeft, setTimeLeft] = useState(timerLimit)\n\n  useEffect(() => {\n    if (!timeLeft) {\n      if (!didOpenUnavailableAssets) {\n        clearUnavailableAssets()\n        setDidOpenUnavailableAssets(false)\n      }\n      return\n    }\n\n    const intervalId = setInterval(() => {\n      setTimeLeft(timeLeft - 1)\n    }, 1000)\n\n    return () => clearInterval(intervalId)\n  }, [timeLeft, clearUnavailableAssets, didOpenUnavailableAssets, setDidOpenUnavailableAssets])\n\n  if (!assets || assets.length === 0) return null\n\n  const moreThanOneUnavailable = assets.length > 1\n  const isShowingAssets = isOpen || !moreThanOneUnavailable\n\n  return (\n    <Column className={styles.unavailableAssetsContainer}>\n      <Column>\n        <Row\n          justifyContent=\"space-between\"\n          marginBottom={isShowingAssets ? '12' : '0'}\n          cursor={moreThanOneUnavailable ? 'pointer' : 'default'}\n          onClick={() => {\n            if (moreThanOneUnavailable) {\n              !didOpenUnavailableAssets && setDidOpenUnavailableAssets(true)\n              toggleOpen()\n            }\n          }}\n        >\n          <Row gap=\"12\" color=\"textSecondary\" className={bodySmall}>\n            {!isShowingAssets && <UnavailableAssetsPreview assets={assets.slice(0, 5)} />}\n            No longer available\n          </Row>\n          {moreThanOneUnavailable && (\n            <Row color=\"textSecondary\">{isOpen ? <ChevronUpBagIcon /> : <ChevronDownBagIcon />}</Row>\n          )}\n          {!didOpenUnavailableAssets && (\n            <Row\n              position=\"relative\"\n              width=\"20\"\n              height=\"20\"\n              color=\"textPrimary\"\n              justifyContent=\"center\"\n              cursor=\"pointer\"\n              onClick={clearUnavailableAssets}\n            >\n              <TimedLoader />\n              <CloseTimerIcon />\n            </Row>\n          )}\n        </Row>\n        <Column gap=\"8\" style={{ marginLeft: '-8px', marginRight: '-8px' }}>\n          {isShowingAssets &&\n            assets.map((asset) => (\n              <BagRow\n                key={asset.id}\n                asset={asset}\n                usdPrice={usdPrice}\n                removeAsset={() => undefined}\n                grayscale\n                isMobile={isMobile}\n              />\n            ))}\n        </Column>\n      </Column>\n    </Column>\n  )\n}\n","import { NFTEventName } from '@uniswap/analytics-events'\nimport { sendAnalyticsEvent, Trace } from 'analytics'\nimport { BagRow, PriceChangeBagRow, UnavailableAssetsHeaderRow } from 'nft/components/bag/BagRow'\nimport { Column } from 'nft/components/Flex'\nimport { useBag, useIsMobile } from 'nft/hooks'\nimport { BagItemStatus, BagStatus } from 'nft/types'\nimport { fetchPrice, formatAssetEventProperties, recalculateBagUsingPooledAssets } from 'nft/utils'\nimport { useEffect, useMemo } from 'react'\nimport { useQuery } from 'react-query'\n\nexport const BagContent = () => {\n  const bagStatus = useBag((s) => s.bagStatus)\n  const setBagStatus = useBag((s) => s.setBagStatus)\n  const markAssetAsReviewed = useBag((s) => s.markAssetAsReviewed)\n  const didOpenUnavailableAssets = useBag((s) => s.didOpenUnavailableAssets)\n  const setDidOpenUnavailableAssets = useBag((s) => s.setDidOpenUnavailableAssets)\n  const uncheckedItemsInBag = useBag((s) => s.itemsInBag)\n  const setItemsInBag = useBag((s) => s.setItemsInBag)\n  const removeAssetsFromBag = useBag((s) => s.removeAssetsFromBag)\n\n  const isMobile = useIsMobile()\n\n  const itemsInBag = useMemo(() => {\n    return recalculateBagUsingPooledAssets(uncheckedItemsInBag)\n  }, [uncheckedItemsInBag])\n\n  const { data: fetchedPriceData } = useQuery(['fetchPrice', {}], () => fetchPrice(), {})\n\n  const { unchangedAssets, priceChangedAssets, unavailableAssets, availableItems } = useMemo(() => {\n    const unchangedAssets = itemsInBag\n      .filter((item) => item.status === BagItemStatus.ADDED_TO_BAG || item.status === BagItemStatus.REVIEWED)\n      .map((item) => item.asset)\n    const priceChangedAssets = itemsInBag\n      .filter((item) => item.status === BagItemStatus.REVIEWING_PRICE_CHANGE)\n      .map((item) => item.asset)\n    const unavailableAssets = itemsInBag\n      .filter((item) => item.status === BagItemStatus.UNAVAILABLE)\n      .map((item) => item.asset)\n    const availableItems = itemsInBag.filter((item) => item.status !== BagItemStatus.UNAVAILABLE)\n\n    return { unchangedAssets, priceChangedAssets, unavailableAssets, availableItems }\n  }, [itemsInBag])\n\n  useEffect(() => {\n    const hasAssetsInReview = priceChangedAssets.length > 0\n    const hasAssets = itemsInBag.length > 0\n\n    if (hasAssetsInReview)\n      sendAnalyticsEvent(NFTEventName.NFT_BUY_BAG_CHANGED, {\n        usd_value: fetchedPriceData,\n        bag_quantity: itemsInBag,\n        ...formatAssetEventProperties(priceChangedAssets),\n      })\n\n    if (bagStatus === BagStatus.IN_REVIEW && !hasAssetsInReview) {\n      if (hasAssets) setBagStatus(BagStatus.CONFIRM_REVIEW)\n      else setBagStatus(BagStatus.ADDING_TO_BAG)\n    }\n\n    if (bagStatus === BagStatus.CONFIRM_REVIEW && !hasAssets) {\n      setBagStatus(BagStatus.ADDING_TO_BAG)\n    }\n  }, [bagStatus, itemsInBag, priceChangedAssets, setBagStatus, fetchedPriceData])\n\n  return (\n    <>\n      <Column display={priceChangedAssets.length > 0 || unavailableAssets.length > 0 ? 'flex' : 'none'}>\n        {unavailableAssets.length > 0 && (\n          <Trace\n            name={NFTEventName.NFT_BUY_BAG_CHANGED}\n            properties={{\n              usd_value: fetchedPriceData,\n              bag_quantity: itemsInBag.length,\n              ...formatAssetEventProperties(unavailableAssets),\n            }}\n            shouldLogImpression\n          >\n            <UnavailableAssetsHeaderRow\n              assets={unavailableAssets}\n              usdPrice={fetchedPriceData}\n              clearUnavailableAssets={() => setItemsInBag(availableItems)}\n              didOpenUnavailableAssets={didOpenUnavailableAssets}\n              setDidOpenUnavailableAssets={setDidOpenUnavailableAssets}\n              isMobile={isMobile}\n            />\n          </Trace>\n        )}\n        {priceChangedAssets.map((asset, index) => (\n          <PriceChangeBagRow\n            key={asset.id}\n            asset={asset}\n            usdPrice={fetchedPriceData}\n            markAssetAsReviewed={markAssetAsReviewed}\n            top={index === 0 && unavailableAssets.length === 0}\n            isMobile={isMobile}\n          />\n        ))}\n      </Column>\n      <Column>\n        {unchangedAssets\n          .slice(0)\n          .reverse()\n          .map((asset) => (\n            <BagRow\n              key={asset.id}\n              asset={asset}\n              usdPrice={fetchedPriceData}\n              removeAsset={removeAssetsFromBag}\n              showRemove={true}\n              isMobile={isMobile}\n            />\n          ))}\n      </Column>\n    </>\n  )\n}\n","import { Trans } from '@lingui/macro'\nimport { OpacityHoverState } from 'components/Common'\nimport { BagCloseIcon } from 'nft/components/icons'\nimport { useMemo } from 'react'\nimport styled from 'styled-components'\nimport { ButtonText, ThemedText } from 'theme'\n\nconst ClearButton = styled(ButtonText)`\n  color: ${({ theme }) => theme.textSecondary};\n  cursor: pointer;\n  font-weight: 600;\n  font-size: 14px;\n  line-height: 16px;\n\n  :active {\n    text-decoration: none;\n  }\n`\n\nconst IconWrapper = styled.button`\n  align-items: center;\n  background-color: transparent;\n  border-radius: 8px;\n  border: none;\n  color: ${({ theme }) => theme.textPrimary};\n  cursor: pointer;\n  display: flex;\n  flex-direction: row;\n  justify-content: flex-end;\n  margin-left: auto;\n  padding: 2px;\n  opacity: 1;\n\n  ${OpacityHoverState}\n`\nconst CounterDot = styled.div<{ sizing: string }>`\n  align-items: center;\n  background-color: ${({ theme }) => theme.accentAction};\n  border-radius: 100px;\n  font-weight: bold;\n  color: ${({ theme }) => theme.accentTextLightPrimary};\n  display: flex;\n  font-size: 10px;\n  justify-content: center;\n  min-width: ${({ sizing }) => sizing};\n  min-height: ${({ sizing }) => sizing};\n  padding: 4px 6px;\n`\nconst Wrapper = styled.div`\n  align-items: center;\n  display: flex;\n  flex-direction: row;\n  gap: 8px;\n  justify-content: flex-start;\n  margin: 16px 28px;\n  text-align: center;\n`\ninterface BagHeaderProps {\n  numberOfAssets: number\n  closeBag: () => void\n  resetFlow: () => void\n  isProfilePage: boolean\n}\n\nconst BASE_SIZING = 14\nconst INCREMENTAL_SIZING = 6\n\nconst getCircleSizing = (numberOfAssets: number): string => {\n  const numberOfCharacters = numberOfAssets.toString().length\n\n  // each digit adds 6px worth of width (approximately), so I set the height and width to be 6px larger for each digit added\n  // 1 digit => 14 + 6, 2 digit 14 + 12, etc.\n  return `${BASE_SIZING + INCREMENTAL_SIZING * numberOfCharacters}px`\n}\n\nexport const BagHeader = ({ numberOfAssets, closeBag, resetFlow, isProfilePage }: BagHeaderProps) => {\n  const sizing = useMemo(() => getCircleSizing(numberOfAssets), [numberOfAssets])\n\n  return (\n    <Wrapper>\n      <ThemedText.HeadlineSmall>{isProfilePage ? <Trans>Sell</Trans> : <Trans>Bag</Trans>}</ThemedText.HeadlineSmall>\n      {numberOfAssets > 0 && (\n        <>\n          <CounterDot sizing={sizing}>{numberOfAssets}</CounterDot>\n          <ClearButton onClick={resetFlow}>\n            <Trans>Clear all</Trans>\n          </ClearButton>\n        </>\n      )}\n      <IconWrapper onClick={closeBag}>\n        <BagCloseIcon data-testid=\"nft-bag-close-icon\" />\n      </IconWrapper>\n    </Wrapper>\n  )\n}\n","import { useIsNftProfilePage } from 'hooks/useIsNftPage'\nimport { Center, Column } from 'nft/components/Flex'\nimport { BagIcon, LargeTagIcon } from 'nft/components/icons'\nimport { subhead } from 'nft/css/common.css'\nimport { themeVars } from 'nft/css/sprinkles.css'\nimport styled from 'styled-components'\n\nconst StyledColumn = styled(Column)`\n  gap: 12px;\n  margin-top: 68px;\n`\n\nconst EmptyState = () => {\n  const isProfilePage = useIsNftProfilePage()\n\n  return (\n    <StyledColumn>\n      <Center>\n        {isProfilePage ? (\n          <LargeTagIcon color={themeVars.colors.textTertiary} />\n        ) : (\n          <BagIcon color={themeVars.colors.textTertiary} height=\"96px\" width=\"96px\" strokeWidth=\"1px\" />\n        )}\n      </Center>\n      {isProfilePage ? (\n        <Center data-testid=\"nft-no-nfts-selected\" className={subhead}>\n          No NFTs selected\n        </Center>\n      ) : (\n        <Column gap=\"16\">\n          <Center data-testid=\"nft-empty-bag\" className={subhead} style={{ lineHeight: '24px' }}>\n            Your bag is empty\n          </Center>\n          <Center fontSize=\"12\" fontWeight=\"normal\" color=\"textSecondary\" style={{ lineHeight: '16px' }}>\n            Selected NFTs will appear here\n          </Center>\n        </Column>\n      )}\n    </StyledColumn>\n  )\n}\n\nexport default EmptyState\n","import { ButtonEmphasis, ButtonSize } from 'components/Button'\nimport { Box } from 'nft/components/Box'\nimport { Column, Row } from 'nft/components/Flex'\nimport { VerifiedIcon } from 'nft/components/icons'\nimport { useIsMobile, useSellAsset } from 'nft/hooks'\nimport { WalletAsset } from 'nft/types'\nimport { useState } from 'react'\n\nimport { RemoveAssetButton, RemoveButton } from '../BagRow'\nimport * as styles from '../BagRow.css'\n\nconst ProfileAssetRow = ({ asset }: { asset: WalletAsset }) => {\n  const removeAsset = useSellAsset((state) => state.removeSellAsset)\n  const isMobile = useIsMobile()\n  const [hovered, setHovered] = useState(false)\n  const handleHover = () => setHovered(!hovered)\n\n  const handleRemoveAsset: React.MouseEventHandler<HTMLElement> = (e) => {\n    e.preventDefault()\n    e.stopPropagation()\n    removeAsset(asset)\n  }\n\n  return (\n    <Row className={styles.bagRow} onMouseEnter={handleHover} onMouseLeave={handleHover}>\n      <Box position=\"relative\" display=\"flex\">\n        {isMobile && <RemoveAssetButton onClick={handleRemoveAsset} />}\n        <img src={asset.smallImageUrl} alt={asset.name} className={styles.bagRowImage} />\n      </Box>\n      <Column overflow=\"hidden\" width=\"full\" color=\"textPrimary\">\n        <Row overflow=\"hidden\" width=\"full\" justifyContent=\"space-between\" whiteSpace=\"nowrap\" gap=\"16\">\n          <Box className={styles.assetName}>{asset.name || `#${asset.tokenId}`}</Box>\n        </Row>\n        <Row overflow=\"hidden\" whiteSpace=\"nowrap\" gap=\"2\">\n          <Box className={styles.collectionName}>{asset.asset_contract.name}</Box>\n          {asset.collectionIsVerified && <VerifiedIcon className={styles.icon} />}\n        </Row>\n      </Column>\n      {hovered && !isMobile && (\n        <RemoveButton onClick={handleRemoveAsset} emphasis={ButtonEmphasis.medium} size={ButtonSize.medium}>\n          Remove\n        </RemoveButton>\n      )}\n    </Row>\n  )\n}\n\nexport default ProfileAssetRow\n","import { Column } from 'nft/components/Flex'\nimport { useSellAsset } from 'nft/hooks'\n\nimport ProfileAssetRow from './ProfileAssetRow'\n\nexport const ProfileBagContent = () => {\n  const sellAssets = useSellAsset((state) => state.sellAssets)\n  return (\n    <Column>\n      {sellAssets.length ? sellAssets.map((asset, index) => <ProfileAssetRow asset={asset} key={index} />) : null}\n    </Column>\n  )\n}\n","import { Trans } from '@lingui/macro'\nimport { NFTEventName } from '@uniswap/analytics-events'\nimport { sendAnalyticsEvent } from 'analytics'\nimport { useIsNftDetailsPage, useIsNftPage, useIsNftProfilePage } from 'hooks/useIsNftPage'\nimport { BagFooter } from 'nft/components/bag/BagFooter'\nimport { Box } from 'nft/components/Box'\nimport { Portal } from 'nft/components/common/Portal'\nimport { Column } from 'nft/components/Flex'\nimport { Overlay } from 'nft/components/modals/Overlay'\nimport { useBag, useIsMobile, useProfilePageState, useSellAsset, useSubscribeScrollState } from 'nft/hooks'\nimport { BagStatus, ProfilePageStateType } from 'nft/types'\nimport { formatAssetEventProperties, recalculateBagUsingPooledAssets } from 'nft/utils'\nimport { useCallback, useEffect, useMemo, useState } from 'react'\nimport styled from 'styled-components'\nimport { Z_INDEX } from 'theme/zIndex'\nimport { shallow } from 'zustand/shallow'\n\nimport * as styles from './Bag.css'\nimport { BagContent } from './BagContent'\nimport { BagHeader } from './BagHeader'\nimport EmptyState from './EmptyContent'\nimport { ProfileBagContent } from './profile/ProfileBagContent'\n\nexport const BAG_WIDTH = 320\nexport const XXXL_BAG_WIDTH = 360\n\ninterface SeparatorProps {\n  top?: boolean\n  show?: boolean\n}\n\nconst BagContainer = styled.div<{ raiseZIndex: boolean; isProfilePage: boolean }>`\n  position: fixed;\n  display: flex;\n  flex-direction: column;\n  top: 88px;\n  right: 20px;\n  width: ${BAG_WIDTH}px;\n  height: calc(100vh - 108px);\n  background: ${({ theme }) => theme.backgroundSurface};\n  border: 1px solid ${({ theme }) => theme.backgroundOutline};\n  border-radius: 16px;\n  box-shadow: ${({ theme }) => theme.shallowShadow};\n  z-index: ${({ raiseZIndex, isProfilePage }) =>\n    raiseZIndex ? (isProfilePage ? Z_INDEX.modalOverTooltip : Z_INDEX.modalBackdrop - 1) : 3};\n\n  @media only screen and (max-width: ${({ theme }) => `${theme.breakpoint.sm}px`}) {\n    right: 0px;\n    top: 0px;\n    width: 100%;\n    height: 100%;\n    border-radius: 0px;\n    border: none;\n  }\n\n  @media only screen and (min-width: ${({ theme }) => `${theme.breakpoint.xxxl}px`}) {\n    width: ${XXXL_BAG_WIDTH}px;\n  }\n`\n\nconst DetailsPageBackground = styled.div`\n  position: fixed;\n  background: rgba(0, 0, 0, 0.7);\n  top: 0px;\n  width: 100%;\n  height: 100%;\n`\n\nconst ContinueButton = styled.div`\n  background: ${({ theme }) => theme.accentAction};\n  color: ${({ theme }) => theme.accentTextLightPrimary};\n  margin: 32px 28px 16px;\n  padding: 10px 0px;\n  border-radius: 12px;\n  text-align: center;\n  font-size: 16px;\n  font-weight: 600;\n  line-height: 20px;\n  cursor: pointer;\n  transition: ${({ theme }) => theme.transition.duration.medium};\n\n  :hover {\n    opacity: ${({ theme }) => theme.opacity.hover};\n  }\n`\n\nconst ScrollingIndicator = ({ top, show }: SeparatorProps) => (\n  <Box\n    marginX=\"24\"\n    borderWidth=\"1px\"\n    borderStyle=\"solid\"\n    borderColor=\"transparent\"\n    borderTopColor={top ? 'transparent' : 'backgroundOutline'}\n    borderBottomColor={top ? 'backgroundOutline' : 'transparent'}\n    opacity={show ? '1' : '0'}\n    transition=\"250\"\n  />\n)\n\nconst Bag = () => {\n  const { resetSellAssets, sellAssets } = useSellAsset(\n    ({ reset, sellAssets }) => ({\n      resetSellAssets: reset,\n      sellAssets,\n    }),\n    shallow\n  )\n\n  const { setProfilePageState } = useProfilePageState(({ setProfilePageState }) => ({ setProfilePageState }))\n\n  const { bagStatus, bagIsLocked, reset, bagExpanded, toggleBag, setBagExpanded } = useBag(\n    (state) => ({ ...state, bagIsLocked: state.isLocked, uncheckedItemsInBag: state.itemsInBag }),\n    shallow\n  )\n  const { uncheckedItemsInBag } = useBag(({ itemsInBag }) => ({ uncheckedItemsInBag: itemsInBag }))\n\n  const isProfilePage = useIsNftProfilePage()\n  const isDetailsPage = useIsNftDetailsPage()\n  const isNFTPage = useIsNftPage()\n  const isMobile = useIsMobile()\n\n  const itemsInBag = useMemo(() => recalculateBagUsingPooledAssets(uncheckedItemsInBag), [uncheckedItemsInBag])\n\n  const [isModalOpen, setModalIsOpen] = useState(false)\n  const { userCanScroll, scrollRef, scrollProgress, scrollHandler } = useSubscribeScrollState()\n\n  const handleCloseBag = useCallback(() => {\n    setBagExpanded({ bagExpanded: false, manualClose: true })\n  }, [setBagExpanded])\n\n  useEffect(() => {\n    if (bagIsLocked && !isModalOpen) setModalIsOpen(true)\n  }, [bagIsLocked, isModalOpen])\n\n  const hasAssetsToShow = itemsInBag.length > 0\n  const isBuyingAssets = itemsInBag.length > 0\n  const isSellingAssets = sellAssets.length > 0\n\n  const shouldRenderEmptyState = Boolean(\n    (!isProfilePage && !isBuyingAssets && bagStatus === BagStatus.ADDING_TO_BAG) || (isProfilePage && !isSellingAssets)\n  )\n\n  const eventProperties = useMemo(\n    () => ({\n      ...formatAssetEventProperties(itemsInBag.map((item) => item.asset)),\n    }),\n    [itemsInBag]\n  )\n\n  if (!bagExpanded || !isNFTPage) {\n    return null\n  }\n\n  return (\n    <Portal>\n      <BagContainer data-testid=\"nft-bag\" raiseZIndex={isMobile || isModalOpen} isProfilePage={isProfilePage}>\n        <BagHeader\n          numberOfAssets={isProfilePage ? sellAssets.length : itemsInBag.length}\n          closeBag={handleCloseBag}\n          resetFlow={isProfilePage ? resetSellAssets : reset}\n          isProfilePage={isProfilePage}\n        />\n        {shouldRenderEmptyState && <EmptyState />}\n        <ScrollingIndicator top show={userCanScroll && scrollProgress > 0} />\n        <Column ref={scrollRef} className={styles.assetsContainer} onScroll={scrollHandler} gap=\"12\">\n          {isProfilePage ? <ProfileBagContent /> : <BagContent />}\n        </Column>\n        {hasAssetsToShow && !isProfilePage && (\n          <BagFooter setModalIsOpen={setModalIsOpen} eventProperties={eventProperties} />\n        )}\n        {isSellingAssets && isProfilePage && (\n          <ContinueButton\n            onClick={() => {\n              toggleBag()\n              setProfilePageState(ProfilePageStateType.LISTING)\n              sendAnalyticsEvent(NFTEventName.NFT_PROFILE_PAGE_START_SELL, {\n                list_quantity: sellAssets.length,\n                collection_addresses: sellAssets.map((asset) => asset.asset_contract.address),\n                token_ids: sellAssets.map((asset) => asset.tokenId),\n              })\n            }}\n          >\n            <Trans>Continue</Trans>\n          </ContinueButton>\n        )}\n      </BagContainer>\n\n      {isDetailsPage ? (\n        <DetailsPageBackground onClick={toggleBag} />\n      ) : (\n        isModalOpen && <Overlay onClick={() => (!bagIsLocked ? setModalIsOpen(false) : undefined)} />\n      )}\n    </Portal>\n  )\n}\n\nexport default Bag\n","import \"src/nft/css/sprinkles.css.ts.vanilla.css!=!../../../../node_modules/@vanilla-extract/webpack-plugin/virtualFileLoader/dist/vanilla-extract-webpack-plugin-virtualFileLoader.cjs.js?{\\\"fileName\\\":\\\"src/nft/css/sprinkles.css.ts.vanilla.css\\\",\\\"source\\\":\\\"#\\\"}!../../../../node_modules/@vanilla-extract/webpack-plugin/extracted.js\"\nimport \"src/nft/components/bag/Bag.css.ts.vanilla.css!=!../../../../node_modules/@vanilla-extract/webpack-plugin/virtualFileLoader/dist/vanilla-extract-webpack-plugin-virtualFileLoader.cjs.js?{\\\"fileName\\\":\\\"src/nft/components/bag/Bag.css.ts.vanilla.css\\\",\\\"source\\\":\\\"Ll8xamN6NTByMSB7CiAgc2Nyb2xsYmFyLXdpZHRoOiBub25lOwp9Ci5fMWpjejUwcjE6Oi13ZWJraXQtc2Nyb2xsYmFyIHsKICBkaXNwbGF5OiBub25lOwp9CkBtZWRpYSAobWluLXdpZHRoOiA3NjhweCkgewogIC5fMWpjejUwcjMgewogICAgd2lkdGg6IDM2MHB4OwogICAgaGVpZ2h0OiBjYWxjKDEwMHZoIC0gNzJweCk7CiAgfQp9\\\"}!../../../../node_modules/@vanilla-extract/webpack-plugin/extracted.js\"\nexport var assetsContainer = '_1jcz50r1 rgw6ez2em rgw6ez2k4 rgw6ez1yy rgw6ez7qu';\nexport var bagContainer = '_1jcz50r3 rgw6ez48y rgw6ez3fa rgw6ez3j5 rgw6ez16y rgw6ez1dy rgw6ez39s rgw6ez4ps rgw6ez7dm rgw6ez51s rgw6ez7n6 rgw6ez4em';"],"names":["BuyButtonStates","AssetMediaType","gql","buildRoutingItem","routingItem","action","RoutingActions","Buy","marketplace","toLowerCase","amountIn","price","value","assetIn","ETHPrice","baseAsset","currency","basePrice","baseDecimals","amountOut","amount","toString","assetOut","id","decimals","address","contractAddress","priceInfo","tokenType","tokenId","orderSource","useTokenInput","create","devtools","inputCurrency","undefined","tokenTradeInput","setInputCurrency","set","clearInputCurrency","setTokenTradeInput","name","buildTradeRouteInput","swap","swapAmounts","inputAmount","outputAmount","quotient","token","isToken","chainId","isNative","pools","route","map","buildPool","pool","isPool","pair","tokenAmountA","reserve0","token0","tokenAmountB","reserve1","token1","fee","liquidity","sqrtRatioX96","tickCurrent","tokenA","tokenB","getBuyButtonStateData","buyButtonState","theme","handleClickOverride","usingPayWithAnyToken","priceImpact","defaultBuyButtonState","handleClick","buttonText","disabled","warningText","warningTextColor","accentWarning","helperText","helperTextColor","textSecondary","buttonColor","accentAction","buttonTextColor","accentTextLightPrimary","buyButtonStateData","WALLET_NOT_CONNECTED","NOT_SUPPORTED_CHAIN","INSUFFICIENT_BALANCE","ERROR","IN_WALLET_CONFIRMATION","PROCESSING_TRANSACTION","FETCHING_TOKEN_ROUTE","INVALID_TOKEN_ROUTE","NO_TOKEN_ROUTE_FOUND","backgroundInteractive","textPrimary","LOADING_ALLOWANCE","IN_WALLET_ALLOWANCE_APPROVAL","PROCESSING_APPROVAL","REQUIRE_APPROVAL","CONFIRM_UPDATED_PRICE","PRICE_IMPACT_HIGH","priceImpactSeverity","color","PAY","FooterContainer","styled","div","Footer","backgroundOutline","FooterHeader","Column","CurrencyRow","Row","TotalColumn","WarningIcon","AlertTriangle","WarningText","ThemedText","BodyPrimary","$color","HelperText","Caption","CurrencyInput","ActionButton","button","$backgroundColor","FiatLoadingBubble","LoadingBubble","PriceImpactContainer","PriceImpactRow","ValueText","Warning","children","data-testid","fontSize","lineHeight","Helper","InputCurrencyValue","totalEthPrice","activeCurrency","tradeState","trade","TradeState","LOADING","ethNumberStandardFormatter","toExact","fontWeight","formatWeiToDecimal","symbol","FiatValue","usdcValue","MouseoverTooltip","text","size","BodySmall","style","displayPercentage","INVALID","NO_ROUTE_FOUND","PENDING_BAG_STATUSES","BagStatus","FETCHING_ROUTE","CONFIRMING_IN_WALLET","FETCHING_FINAL_ROUTE","BagFooter","setModalIsOpen","eventProperties","toggleWalletDrawer","useToggleAccountDrawer","useTheme","account","connector","useWeb3React","connected","Boolean","useBagTotalEthPrice","itemsInBag","useBag","state","useMemo","reduce","total","item","status","BagItemStatus","UNAVAILABLE","add","BigNumber","from","asset","updatedPriceInfo","shallow","defaultCurrency","useCurrency","inputCurrencyBalance","useTokenBalance","isLocked","bagIsLocked","bagStatus","setBagExpanded","setBagStatus","tokenSelectorOpen","setTokenSelectorOpen","useState","isPending","includes","ChainId","MAINNET","universalRouterAddress","universalRouterAddressIsLoading","useNftUniversalRouterAddress","data","loading","useNftUniversalRouterAddressQuery","fetchPolicy","nftRoute","toAddress","useSubscribeTransactionState","transactionState","useSendTransaction","setTransactionState","setState","transactionStateRef","useRef","setLocked","setBagLocked","useEffect","subscribe","current","TxStateType","Confirming","Denied","Invalid","WARNING","CONFIRM_REVIEW","New","fetchAssets","useFetchAssets","uncheckedItemsInBag","didOpenUnavailableAssets","setDidOpenUnavailableAssets","setItemsInBag","recalculateBagUsingPooledAssets","fetchGqlRoute","useNftRouteLazyQuery","purchaseAssets","usePurchaseAssets","provider","sendTransaction","setTransactionResponse","useTransactionResponse","reset","resetBag","useCallback","routingData","assetsToBuy","purchasingWithErc20","purchaseResponse","getSigner","bagExpanded","resetStateBeforeFetch","variables","senderAddress","nftTrades","buildNftTradeInputFromBagItems","tokenTrades","onCompleted","ADDING_TO_BAG","wishAssetsToBuy","filter","routeResponse","buildRouteResponse","useErc20Token","routingItems","valueToSend","sendAmount","calldata","to","newBagItems","nextBagStatus","getNextBagState","hasPriceAdjustment","updatedAssets","compareAssetsWithTransactionRoute","unchanged","priceChanged","unavailable","filterUpdatedAssetsByState","hasAssets","length","hasAssetsInReview","hasUnavailableAssets","unavailableAsset","changedAsset","REVIEWING_PRICE_CHANGE","unchangedAsset","REVIEWED","IN_REVIEW","CONFIRM_QUOTE","parsedOutputAmount","tryParseCurrencyAmount","formatEther","maximumAmountIn","allowedSlippage","useDerivedPayWithAnyTokenSwapInfo","useDebouncedTrade","TradeType","EXACT_OUTPUT","RouterPreference","API","useAutoSlippageTolerance","isClassicTrade","allowance","usePermit2Allowance","getURAddress","nftURAddress","UNIVERSAL_ROUTER_ADDRESS","isSupportedChain","TradeFillType","Classic","loadingAllowance","AllowanceState","usePayWithAnyTokenSwap","hasRoutes","routes","hasInputAmount","hasAllowance","slippage","parseInt","multiply","toSignificant","mixedTokenTradeRouteInputs","v2TokenTradeRouteInputs","v3TokenTradeRouteInputs","buildAllTradeRouteInputs","swaps","protocol","Protocol","MIXED","push","V2","mixedRoutes","tradeType","TokenTradeType","ExactOutput","v2Routes","v3Routes","permitInput","permitSignature","details","expiration","nonce","sigDeadline","signature","spender","permit","slippageToleranceBasisPoints","tokenAmount","usePriceImpact","marketPriceImpact","computeRealizedPriceImpact","priceImpactWarning","getPriceImpactWarning","warningColor","accentCritical","type","toHumanReadablePercent","sign","lessThan","exactFloat","numerator","Number","denominator","number","parseFloat","toFixed","fiatValueTradeInput","useStablecoinValue","fiatValueTradeOutput","balance","balanceInEth","useWalletBalance","sufficientBalance","parseEther","gte","switchChain","useSwitchChain","VALID","allowanceRequired","REQUIRED","approveAndPermit","isApprovalPending","isApprovalLoading","traceEventProperties","usd_value","using_erc20","gap","SubHeaderSmall","onClick","sendAnalyticsEvent","NFTEventName","NFT_BUY_TOKEN_SELECTOR_CLICKED","CurrencyLogo","HeadlineSmall","ChevronDown","marginBottom","TraceEvent","events","BrowserEvent","NFT_BUY_BAG_PAY","element","InterfaceElementName","NFT_BUY_BAG_PAY_BUTTON","properties","shouldLogImpression","Loader","stroke","CurrencySearchModal","isOpen","onDismiss","onCurrencySelect","NFT_BUY_TOKEN_SELECTED","token_address","token_symbol","selectedCurrency","onlyShowCurrenciesWithBalance","dash","keyframes","Circle","circle","TimedLoader","Box","display","position","svg","height","width","strokeWidth","strokeLinecap","transform","transformOrigin","fill","r","cx","cy","StyledImageContainer","isDisabled","opacity","enabled","img","$aspectRatio","transition","duration","medium","timing","ease","$hidden","imageLoading","backgroundSurface","pauseButton","BREAKPOINTS","sm","video","audio","$height","colors","gray500","Image","Video","Audio","isText","SuspiciousIcon","accentFailure","SuspiciousIconContainer","Suspicious","placement","assetName","bagRow","bagRowImage","collectionName","grayscaleImage","icon","RemoveButton","ThemeButton","ReviewButton","RemoveAssetOverlay","RemoveAssetButton","CircularCloseIcon","NoContentContainer","background","className","styles","textAlign","left","top","br","BagRow","usdPrice","removeAsset","showRemove","grayscale","isMobile","loadedImage","setImageLoaded","noImageAvailable","setNoImageAvailable","smallImageUrl","cardHovered","setCardHovered","handleMouseEnter","handleMouseLeave","showRemoveButton","assetEthPrice","assetEthPriceFormatted","assetUSDPriceFormatted","handleRemoveClick","e","preventDefault","stopPropagation","Link","getAssetHref","textDecoration","onMouseEnter","onMouseLeave","as","src","alt","clsx","onLoad","onError","visibility","overflow","whiteSpace","susFlag","collectionIsVerified","VerifiedIcon","emphasis","ButtonEmphasis","ButtonSize","flexShrink","alignItems","PriceChangeBagRow","markAssetAsReviewed","isPriceIncrease","gt","handleRemove","handleKeep","borderTopColor","SquareArrowUpIcon","SquareArrowDownIcon","marginLeft","marginRight","justifyContent","small","high","UnavailableAssetsPreview","assets","gridTemplateColumns","ASSET_PREVIEW_WIDTH","index","borderStyle","borderWidth","borderColor","borderRadius","zIndex","UnavailableAssetsHeaderRow","clearUnavailableAssets","toggleOpen","useReducer","s","timeLeft","setTimeLeft","intervalId","setInterval","clearInterval","moreThanOneUnavailable","isShowingAssets","cursor","bodySmall","slice","ChevronUpBagIcon","ChevronDownBagIcon","CloseTimerIcon","BagContent","removeAssetsFromBag","useIsMobile","fetchedPriceData","useQuery","fetchPrice","unchangedAssets","priceChangedAssets","unavailableAssets","availableItems","ADDED_TO_BAG","NFT_BUY_BAG_CHANGED","bag_quantity","formatAssetEventProperties","Trace","reverse","ClearButton","ButtonText","IconWrapper","OpacityHoverState","CounterDot","sizing","Wrapper","getCircleSizing","numberOfCharacters","numberOfAssets","BASE_SIZING","INCREMENTAL_SIZING","BagHeader","closeBag","resetFlow","isProfilePage","BagCloseIcon","StyledColumn","useIsNftProfilePage","Center","LargeTagIcon","themeVars","textTertiary","BagIcon","subhead","useSellAsset","removeSellAsset","hovered","setHovered","handleHover","handleRemoveAsset","asset_contract","ProfileBagContent","sellAssets","ProfileAssetRow","BAG_WIDTH","XXXL_BAG_WIDTH","BagContainer","shallowShadow","raiseZIndex","Z_INDEX","modalOverTooltip","modalBackdrop","breakpoint","xxxl","DetailsPageBackground","ContinueButton","hover","ScrollingIndicator","show","marginX","borderBottomColor","resetSellAssets","setProfilePageState","useProfilePageState","toggleBag","isDetailsPage","useIsNftDetailsPage","isNFTPage","useIsNftPage","isModalOpen","userCanScroll","scrollRef","scrollProgress","scrollHandler","useSubscribeScrollState","handleCloseBag","manualClose","hasAssetsToShow","isBuyingAssets","isSellingAssets","shouldRenderEmptyState","Portal","EmptyState","ref","onScroll","ProfilePageStateType","LISTING","NFT_PROFILE_PAGE_START_SELL","list_quantity","collection_addresses","token_ids","Overlay"],"sourceRoot":""}